
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001368  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  0002063c  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  0002063c  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  0002063c  2**0
                  CONTENTS
  5 .data         0000063c  20000000  0c001368  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000014  2000063c  0c0019a4  0002063c  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  0002063c  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000000  30000000  30000000  0002063c  2**0
                  CONTENTS
 10 .debug_aranges 00000168  00000000  00000000  00020640  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000056f7  00000000  00000000  000207a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000d4f  00000000  00000000  00025e9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000166c  00000000  00000000  00026bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000558  00000000  00000000  0002825c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000767e9  00000000  00000000  000287b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000006b8  00000000  00000000  0009ef9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000e8  00000000  00000000  0009f655  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .build_attributes 000002e9  00000000  00000000  0009f73d  2**0
                  CONTENTS, READONLY
 19 .debug_macro  00018cfb  00000000  00000000  0009fa26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	d9 03 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c001368 	.word	0x0c001368
 800024c:	20000000 	.word	0x20000000
 8000250:	0000063c 	.word	0x0000063c
 8000254:	0c0019a4 	.word	0x0c0019a4
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c001368 	.word	0x0c001368
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c001368 	.word	0x0c001368
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	2000063c 	.word	0x2000063c
 800027c:	00000010 	.word	0x00000010
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	08000819 	.word	0x08000819
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	08000c21 	.word	0x08000c21
    ldr  r0, =main
 80002ac:	080002b5 	.word	0x080002b5

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <main>:
char secretCode [] = "I CAN MORSE";



int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
    XMC_GPIO_CONFIG_t config;

    config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	713b      	strb	r3, [r7, #4]
    config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 80002be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c2:	60bb      	str	r3, [r7, #8]
    config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 80002c4:	2304      	movs	r3, #4
 80002c6:	733b      	strb	r3, [r7, #12]

    XMC_GPIO_Init(LED1, &config);
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	461a      	mov	r2, r3
 80002cc:	2101      	movs	r1, #1
 80002ce:	4808      	ldr	r0, [pc, #32]	; (80002f0 <main+0x3c>)
 80002d0:	f000 f9a8 	bl	8000624 <XMC_GPIO_Init>

    DelayInit();
 80002d4:	f000 f892 	bl	80003fc <DelayInit>
    delayMs(DOT_TIME);
 80002d8:	2064      	movs	r0, #100	; 0x64
 80002da:	f000 f8a3 	bl	8000424 <delayMs>
    while(1)
    {
        textToMorse(secretCode); //.. / -.-. .- -. / -- --- .-. ... .
 80002de:	4805      	ldr	r0, [pc, #20]	; (80002f4 <main+0x40>)
 80002e0:	f000 f8d8 	bl	8000494 <textToMorse>
        // Space between Transmission
        delayMs(REPEAT_TIME);
 80002e4:	f241 205c 	movw	r0, #4700	; 0x125c
 80002e8:	f000 f89c 	bl	8000424 <delayMs>
        textToMorse(secretCode); //.. / -.-. .- -. / -- --- .-. ... .
 80002ec:	e7f7      	b.n	80002de <main+0x2a>
 80002ee:	bf00      	nop
 80002f0:	48028100 	.word	0x48028100
 80002f4:	20000000 	.word	0x20000000

080002f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	6039      	str	r1, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000308:	2b00      	cmp	r3, #0
 800030a:	db0a      	blt.n	8000322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	b2da      	uxtb	r2, r3
 8000310:	490c      	ldr	r1, [pc, #48]	; (8000344 <__NVIC_SetPriority+0x4c>)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	0092      	lsls	r2, r2, #2
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	440b      	add	r3, r1
 800031c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000320:	e00a      	b.n	8000338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	b2da      	uxtb	r2, r3
 8000326:	4908      	ldr	r1, [pc, #32]	; (8000348 <__NVIC_SetPriority+0x50>)
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	f003 030f 	and.w	r3, r3, #15
 800032e:	3b04      	subs	r3, #4
 8000330:	0092      	lsls	r2, r2, #2
 8000332:	b2d2      	uxtb	r2, r2
 8000334:	440b      	add	r3, r1
 8000336:	761a      	strb	r2, [r3, #24]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	e000e100 	.word	0xe000e100
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3b01      	subs	r3, #1
 8000358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800035c:	d301      	bcc.n	8000362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800035e:	2301      	movs	r3, #1
 8000360:	e00f      	b.n	8000382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000362:	4a0a      	ldr	r2, [pc, #40]	; (800038c <SysTick_Config+0x40>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3b01      	subs	r3, #1
 8000368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800036a:	213f      	movs	r1, #63	; 0x3f
 800036c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000370:	f7ff ffc2 	bl	80002f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <SysTick_Config+0x40>)
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800037a:	4b04      	ldr	r3, [pc, #16]	; (800038c <SysTick_Config+0x40>)
 800037c:	2207      	movs	r2, #7
 800037e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000380:	2300      	movs	r3, #0
}
 8000382:	4618      	mov	r0, r3
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	e000e010 	.word	0xe000e010

08000390 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	460b      	mov	r3, r1
 800039a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800039c:	78fb      	ldrb	r3, [r7, #3]
 800039e:	2201      	movs	r2, #1
 80003a0:	409a      	lsls	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	605a      	str	r2, [r3, #4]
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80003b2:	b480      	push	{r7}
 80003b4:	b083      	sub	sp, #12
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
 80003ba:	460b      	mov	r3, r1
 80003bc:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80003be:	78fb      	ldrb	r3, [r7, #3]
 80003c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80003c4:	409a      	lsls	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	605a      	str	r2, [r3, #4]
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
	...

080003d8 <SysTick_Handler>:
    "...--", "....-", ".....", "-....", "--...", "---..", "----.", "/", " "
};

// SysTick_Handler function will be called every 1 ms
void SysTick_Handler()
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
    if (msTicks != 0)
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <SysTick_Handler+0x20>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d004      	beq.n	80003ee <SysTick_Handler+0x16>
    {
        msTicks--;
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <SysTick_Handler+0x20>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	3b01      	subs	r3, #1
 80003ea:	4a03      	ldr	r2, [pc, #12]	; (80003f8 <SysTick_Handler+0x20>)
 80003ec:	6013      	str	r3, [r2, #0]
    }
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	2000063c 	.word	0x2000063c

080003fc <DelayInit>:

void DelayInit()
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
    // Update SystemCoreClock value
    SystemCoreClockUpdate();
 8000400:	f000 fb58 	bl	8000ab4 <SystemCoreClockUpdate>
    // Configure the SysTick timer to overflow every 1 s
    SysTick_Config(SystemCoreClock / TICKS_PER_SECOND);
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <DelayInit+0x20>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a05      	ldr	r2, [pc, #20]	; (8000420 <DelayInit+0x24>)
 800040a:	fba2 2303 	umull	r2, r3, r2, r3
 800040e:	099b      	lsrs	r3, r3, #6
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff9b 	bl	800034c <SysTick_Config>
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	2000ffc0 	.word	0x2000ffc0
 8000420:	10624dd3 	.word	0x10624dd3

08000424 <delayMs>:

void delayMs(uint32_t ms)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
    // Reload ms value
    msTicks = ms;
 800042c:	4a06      	ldr	r2, [pc, #24]	; (8000448 <delayMs+0x24>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	6013      	str	r3, [r2, #0]
    // Wait until msTick reach zero
    while (msTicks){
 8000432:	bf00      	nop
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <delayMs+0x24>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d1fb      	bne.n	8000434 <delayMs+0x10>

    }
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	2000063c 	.word	0x2000063c

0800044c <dot>:

void dot(){
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
    XMC_GPIO_SetOutputHigh(LED1);
 8000450:	2101      	movs	r1, #1
 8000452:	4806      	ldr	r0, [pc, #24]	; (800046c <dot+0x20>)
 8000454:	f7ff ff9c 	bl	8000390 <XMC_GPIO_SetOutputHigh>
    delayMs(DOT_TIME);
 8000458:	2064      	movs	r0, #100	; 0x64
 800045a:	f7ff ffe3 	bl	8000424 <delayMs>
    XMC_GPIO_SetOutputLow(LED1);
 800045e:	2101      	movs	r1, #1
 8000460:	4802      	ldr	r0, [pc, #8]	; (800046c <dot+0x20>)
 8000462:	f7ff ffa6 	bl	80003b2 <XMC_GPIO_SetOutputLow>
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	48028100 	.word	0x48028100

08000470 <dash>:

void dash(){
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
    XMC_GPIO_SetOutputHigh(LED1);
 8000474:	2101      	movs	r1, #1
 8000476:	4806      	ldr	r0, [pc, #24]	; (8000490 <dash+0x20>)
 8000478:	f7ff ff8a 	bl	8000390 <XMC_GPIO_SetOutputHigh>
    delayMs(DASH_TIME);
 800047c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000480:	f7ff ffd0 	bl	8000424 <delayMs>
    XMC_GPIO_SetOutputLow(LED1);
 8000484:	2101      	movs	r1, #1
 8000486:	4802      	ldr	r0, [pc, #8]	; (8000490 <dash+0x20>)
 8000488:	f7ff ff93 	bl	80003b2 <XMC_GPIO_SetOutputLow>
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	48028100 	.word	0x48028100

08000494 <textToMorse>:

void textToMorse(const char *text) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < strlen(text); i++) {
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	e04f      	b.n	8000542 <textToMorse+0xae>
        char c = tolower(text[i]);
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	4413      	add	r3, r2
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	73fb      	strb	r3, [r7, #15]
 80004ac:	f000 fc0e 	bl	8000ccc <__locale_ctype_ptr>
 80004b0:	4602      	mov	r2, r0
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	3301      	adds	r3, #1
 80004b6:	4413      	add	r3, r2
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	f003 0303 	and.w	r3, r3, #3
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d102      	bne.n	80004c8 <textToMorse+0x34>
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
 80004c4:	3320      	adds	r3, #32
 80004c6:	e000      	b.n	80004ca <textToMorse+0x36>
 80004c8:	7bfb      	ldrb	r3, [r7, #15]
 80004ca:	73bb      	strb	r3, [r7, #14]
        if (c >= 'a' && c <= 'z') {
 80004cc:	7bbb      	ldrb	r3, [r7, #14]
 80004ce:	2b60      	cmp	r3, #96	; 0x60
 80004d0:	d929      	bls.n	8000526 <textToMorse+0x92>
 80004d2:	7bbb      	ldrb	r3, [r7, #14]
 80004d4:	2b7a      	cmp	r3, #122	; 0x7a
 80004d6:	d826      	bhi.n	8000526 <textToMorse+0x92>
            const char *morse = morseCode[c - 'a'];
 80004d8:	7bbb      	ldrb	r3, [r7, #14]
 80004da:	3b61      	subs	r3, #97	; 0x61
 80004dc:	4a1e      	ldr	r2, [pc, #120]	; (8000558 <textToMorse+0xc4>)
 80004de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004e2:	60bb      	str	r3, [r7, #8]
            for (int j = 0; morse[j] != '\0'; j++) {
 80004e4:	2300      	movs	r3, #0
 80004e6:	613b      	str	r3, [r7, #16]
 80004e8:	e016      	b.n	8000518 <textToMorse+0x84>
                if (morse[j] == '.') {
 80004ea:	693b      	ldr	r3, [r7, #16]
 80004ec:	68ba      	ldr	r2, [r7, #8]
 80004ee:	4413      	add	r3, r2
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b2e      	cmp	r3, #46	; 0x2e
 80004f4:	d102      	bne.n	80004fc <textToMorse+0x68>
                    // Dot: 100ms
                    dot();
 80004f6:	f7ff ffa9 	bl	800044c <dot>
 80004fa:	e007      	b.n	800050c <textToMorse+0x78>
                } else if (morse[j] == '-') {
 80004fc:	693b      	ldr	r3, [r7, #16]
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	4413      	add	r3, r2
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b2d      	cmp	r3, #45	; 0x2d
 8000506:	d101      	bne.n	800050c <textToMorse+0x78>
                    // Dash: 300ms
                    dash();
 8000508:	f7ff ffb2 	bl	8000470 <dash>
                }
                // Space between Morse characters (1 dot)
                delayMs(DOT_TIME);
 800050c:	2064      	movs	r0, #100	; 0x64
 800050e:	f7ff ff89 	bl	8000424 <delayMs>
            for (int j = 0; morse[j] != '\0'; j++) {
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	3301      	adds	r3, #1
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]
 800051a:	68ba      	ldr	r2, [r7, #8]
 800051c:	4413      	add	r3, r2
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d1e2      	bne.n	80004ea <textToMorse+0x56>
        if (c >= 'a' && c <= 'z') {
 8000524:	e007      	b.n	8000536 <textToMorse+0xa2>
            }
        } else if (c == ' ') {
 8000526:	7bbb      	ldrb	r3, [r7, #14]
 8000528:	2b20      	cmp	r3, #32
 800052a:	d104      	bne.n	8000536 <textToMorse+0xa2>
            // Space between words (7 dots)
            delayMs(SPACE_TIME);
 800052c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000530:	f7ff ff78 	bl	8000424 <delayMs>
            continue;
 8000534:	e002      	b.n	800053c <textToMorse+0xa8>
        }
        // Space between Morse letters (3 dots)
        delayMs(LETTER_TIME);
 8000536:	20c8      	movs	r0, #200	; 0xc8
 8000538:	f7ff ff74 	bl	8000424 <delayMs>
    for (int i = 0; i < strlen(text); i++) {
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	3301      	adds	r3, #1
 8000540:	617b      	str	r3, [r7, #20]
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f000 fd7c 	bl	8001040 <strlen>
 8000548:	4602      	mov	r2, r0
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	429a      	cmp	r2, r3
 800054e:	d8a8      	bhi.n	80004a2 <textToMorse+0xe>
    }
}
 8000550:	bf00      	nop
 8000552:	3718      	adds	r7, #24
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	2000000c 	.word	0x2000000c

0800055c <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	460b      	mov	r3, r1
 8000566:	70fb      	strb	r3, [r7, #3]
 8000568:	4613      	mov	r3, r2
 800056a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	089b      	lsrs	r3, r3, #2
 8000570:	b2db      	uxtb	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3204      	adds	r2, #4
 8000578:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	f003 0303 	and.w	r3, r3, #3
 8000582:	00db      	lsls	r3, r3, #3
 8000584:	21f8      	movs	r1, #248	; 0xf8
 8000586:	fa01 f303 	lsl.w	r3, r1, r3
 800058a:	43db      	mvns	r3, r3
 800058c:	78f9      	ldrb	r1, [r7, #3]
 800058e:	0889      	lsrs	r1, r1, #2
 8000590:	b2c9      	uxtb	r1, r1
 8000592:	4608      	mov	r0, r1
 8000594:	ea02 0103 	and.w	r1, r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	1d02      	adds	r2, r0, #4
 800059c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	089b      	lsrs	r3, r3, #2
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3204      	adds	r2, #4
 80005ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005b0:	78b9      	ldrb	r1, [r7, #2]
 80005b2:	78fb      	ldrb	r3, [r7, #3]
 80005b4:	f003 0303 	and.w	r3, r3, #3
 80005b8:	00db      	lsls	r3, r3, #3
 80005ba:	fa01 f303 	lsl.w	r3, r1, r3
 80005be:	78f9      	ldrb	r1, [r7, #3]
 80005c0:	0889      	lsrs	r1, r1, #2
 80005c2:	b2c9      	uxtb	r1, r1
 80005c4:	4608      	mov	r0, r1
 80005c6:	ea42 0103 	orr.w	r1, r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	1d02      	adds	r2, r0, #4
 80005ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80005de:	b480      	push	{r7}
 80005e0:	b083      	sub	sp, #12
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	460b      	mov	r3, r1
 80005e8:	70fb      	strb	r3, [r7, #3]
 80005ea:	4613      	mov	r3, r2
 80005ec:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80005f2:	78fb      	ldrb	r3, [r7, #3]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	2103      	movs	r1, #3
 80005f8:	fa01 f303 	lsl.w	r3, r1, r3
 80005fc:	43db      	mvns	r3, r3
 80005fe:	401a      	ands	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000608:	78b9      	ldrb	r1, [r7, #2]
 800060a:	78fb      	ldrb	r3, [r7, #3]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	431a      	orrs	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	460b      	mov	r3, r1
 800062e:	607a      	str	r2, [r7, #4]
 8000630:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000632:	7afb      	ldrb	r3, [r7, #11]
 8000634:	089b      	lsrs	r3, r3, #2
 8000636:	b2db      	uxtb	r3, r3
 8000638:	461a      	mov	r2, r3
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	3204      	adds	r2, #4
 800063e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000642:	7afb      	ldrb	r3, [r7, #11]
 8000644:	f003 0303 	and.w	r3, r3, #3
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	21f8      	movs	r1, #248	; 0xf8
 800064c:	fa01 f303 	lsl.w	r3, r1, r3
 8000650:	43db      	mvns	r3, r3
 8000652:	7af9      	ldrb	r1, [r7, #11]
 8000654:	0889      	lsrs	r1, r1, #2
 8000656:	b2c9      	uxtb	r1, r1
 8000658:	4608      	mov	r0, r1
 800065a:	ea02 0103 	and.w	r1, r2, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	1d02      	adds	r2, r0, #4
 8000662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800066a:	7afb      	ldrb	r3, [r7, #11]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	2103      	movs	r1, #3
 8000670:	fa01 f303 	lsl.w	r3, r1, r3
 8000674:	43db      	mvns	r3, r3
 8000676:	401a      	ands	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4a38      	ldr	r2, [pc, #224]	; (8000760 <XMC_GPIO_Init+0x13c>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d003      	beq.n	800068c <XMC_GPIO_Init+0x68>
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4a37      	ldr	r2, [pc, #220]	; (8000764 <XMC_GPIO_Init+0x140>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d10a      	bne.n	80006a2 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000690:	7afb      	ldrb	r3, [r7, #11]
 8000692:	2101      	movs	r1, #1
 8000694:	fa01 f303 	lsl.w	r3, r1, r3
 8000698:	43db      	mvns	r3, r3
 800069a:	401a      	ands	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	661a      	str	r2, [r3, #96]	; 0x60
 80006a0:	e03c      	b.n	800071c <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	7afb      	ldrb	r3, [r7, #11]
 80006a8:	409a      	lsls	r2, r3
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80006ae:	7afb      	ldrb	r3, [r7, #11]
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3210      	adds	r2, #16
 80006ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006be:	7afb      	ldrb	r3, [r7, #11]
 80006c0:	f003 0307 	and.w	r3, r3, #7
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	2107      	movs	r1, #7
 80006c8:	fa01 f303 	lsl.w	r3, r1, r3
 80006cc:	43db      	mvns	r3, r3
 80006ce:	7af9      	ldrb	r1, [r7, #11]
 80006d0:	08c9      	lsrs	r1, r1, #3
 80006d2:	b2c9      	uxtb	r1, r1
 80006d4:	4608      	mov	r0, r1
 80006d6:	ea02 0103 	and.w	r1, r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	f100 0210 	add.w	r2, r0, #16
 80006e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80006e4:	7afb      	ldrb	r3, [r7, #11]
 80006e6:	08db      	lsrs	r3, r3, #3
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	461a      	mov	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3210      	adds	r2, #16
 80006f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	7a1b      	ldrb	r3, [r3, #8]
 80006f8:	4619      	mov	r1, r3
 80006fa:	7afb      	ldrb	r3, [r7, #11]
 80006fc:	f003 0307 	and.w	r3, r3, #7
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	7af9      	ldrb	r1, [r7, #11]
 8000708:	08c9      	lsrs	r1, r1, #3
 800070a:	b2c9      	uxtb	r1, r1
 800070c:	4608      	mov	r0, r1
 800070e:	ea42 0103 	orr.w	r1, r2, r3
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	f100 0210 	add.w	r2, r0, #16
 8000718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800071c:	7afb      	ldrb	r3, [r7, #11]
 800071e:	089b      	lsrs	r3, r3, #2
 8000720:	b2db      	uxtb	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3204      	adds	r2, #4
 8000728:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	7afb      	ldrb	r3, [r7, #11]
 8000734:	f003 0303 	and.w	r3, r3, #3
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	7af9      	ldrb	r1, [r7, #11]
 8000740:	0889      	lsrs	r1, r1, #2
 8000742:	b2c9      	uxtb	r1, r1
 8000744:	4608      	mov	r0, r1
 8000746:	ea42 0103 	orr.w	r1, r2, r3
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	1d02      	adds	r2, r0, #4
 800074e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000752:	bf00      	nop
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	48028e00 	.word	0x48028e00
 8000764:	48028f00 	.word	0x48028f00

08000768 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]
 8000774:	4613      	mov	r3, r2
 8000776:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	08db      	lsrs	r3, r3, #3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	461a      	mov	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3210      	adds	r2, #16
 8000784:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	2107      	movs	r1, #7
 8000792:	fa01 f303 	lsl.w	r3, r1, r3
 8000796:	43db      	mvns	r3, r3
 8000798:	78f9      	ldrb	r1, [r7, #3]
 800079a:	08c9      	lsrs	r1, r1, #3
 800079c:	b2c9      	uxtb	r1, r1
 800079e:	4608      	mov	r0, r1
 80007a0:	ea02 0103 	and.w	r1, r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f100 0210 	add.w	r2, r0, #16
 80007aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80007ae:	78fb      	ldrb	r3, [r7, #3]
 80007b0:	08db      	lsrs	r3, r3, #3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	461a      	mov	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3210      	adds	r2, #16
 80007ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007be:	78b9      	ldrb	r1, [r7, #2]
 80007c0:	78fb      	ldrb	r3, [r7, #3]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	fa01 f303 	lsl.w	r3, r1, r3
 80007cc:	78f9      	ldrb	r1, [r7, #3]
 80007ce:	08c9      	lsrs	r1, r1, #3
 80007d0:	b2c9      	uxtb	r1, r1
 80007d2:	4608      	mov	r0, r1
 80007d4:	ea42 0103 	orr.w	r1, r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f100 0210 	add.w	r2, r0, #16
 80007de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b085      	sub	sp, #20
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	e003      	b.n	8000804 <delay+0x16>
  {
    __NOP();
 80007fc:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	3301      	adds	r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	429a      	cmp	r2, r3
 800080a:	d8f7      	bhi.n	80007fc <delay+0xe>
  }
}
 800080c:	bf00      	nop
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000818:	b598      	push	{r3, r4, r7, lr}
 800081a:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 800081c:	4a06      	ldr	r2, [pc, #24]	; (8000838 <SystemInit+0x20>)
 800081e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000822:	4614      	mov	r4, r2
 8000824:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000826:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 800082a:	f000 f807 	bl	800083c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 800082e:	f000 f83d 	bl	80008ac <SystemCoreClockSetup>
}
 8000832:	bf00      	nop
 8000834:	bd98      	pop	{r3, r4, r7, pc}
 8000836:	bf00      	nop
 8000838:	2000ffc4 	.word	0x2000ffc4

0800083c <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000842:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <SystemCoreSetup+0x64>)
 8000846:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <SystemCoreSetup+0x68>)
 8000848:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800084a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 800084e:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <SystemCoreSetup+0x64>)
 8000852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <SystemCoreSetup+0x64>)
 8000858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800085c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <SystemCoreSetup+0x64>)
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <SystemCoreSetup+0x64>)
 8000866:	f023 0308 	bic.w	r3, r3, #8
 800086a:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <SystemCoreSetup+0x6c>)
 800086e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000872:	3314      	adds	r3, #20
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f023 030f 	bic.w	r3, r3, #15
 800087e:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f043 0303 	orr.w	r3, r3, #3
 8000886:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <SystemCoreSetup+0x6c>)
 800088a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800088e:	3314      	adds	r3, #20
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	601a      	str	r2, [r3, #0]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000ed00 	.word	0xe000ed00
 80008a4:	08000000 	.word	0x08000000
 80008a8:	58001000 	.word	0x58001000

080008ac <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80008b0:	4b75      	ldr	r3, [pc, #468]	; (8000a88 <SystemCoreClockSetup+0x1dc>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d10c      	bne.n	80008d6 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 80008bc:	4b72      	ldr	r3, [pc, #456]	; (8000a88 <SystemCoreClockSetup+0x1dc>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	4a71      	ldr	r2, [pc, #452]	; (8000a88 <SystemCoreClockSetup+0x1dc>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80008c8:	bf00      	nop
 80008ca:	4b6f      	ldr	r3, [pc, #444]	; (8000a88 <SystemCoreClockSetup+0x1dc>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d0f9      	beq.n	80008ca <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80008d6:	4b6d      	ldr	r3, [pc, #436]	; (8000a8c <SystemCoreClockSetup+0x1e0>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d009      	beq.n	80008f6 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80008e2:	4b6a      	ldr	r3, [pc, #424]	; (8000a8c <SystemCoreClockSetup+0x1e0>)
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	4a69      	ldr	r2, [pc, #420]	; (8000a8c <SystemCoreClockSetup+0x1e0>)
 80008e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ec:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80008ee:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80008f2:	f7ff ff7c 	bl	80007ee <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80008f6:	4b66      	ldr	r3, [pc, #408]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	4a65      	ldr	r2, [pc, #404]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 80008fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000900:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 8000902:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000906:	f7ff ff72 	bl	80007ee <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 800090a:	4b61      	ldr	r3, [pc, #388]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	4a60      	ldr	r2, [pc, #384]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 8000910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000914:	f023 0302 	bic.w	r3, r3, #2
 8000918:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 800091a:	4b5e      	ldr	r3, [pc, #376]	; (8000a94 <SystemCoreClockSetup+0x1e8>)
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000922:	2b00      	cmp	r3, #0
 8000924:	d029      	beq.n	800097a <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 8000926:	4b5b      	ldr	r3, [pc, #364]	; (8000a94 <SystemCoreClockSetup+0x1e8>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	4a5a      	ldr	r2, [pc, #360]	; (8000a94 <SystemCoreClockSetup+0x1e8>)
 800092c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000930:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000934:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 8000936:	f000 f927 	bl	8000b88 <OSCHP_GetFrequency>
 800093a:	4602      	mov	r2, r0
 800093c:	4b56      	ldr	r3, [pc, #344]	; (8000a98 <SystemCoreClockSetup+0x1ec>)
 800093e:	fba3 2302 	umull	r2, r3, r3, r2
 8000942:	0d1b      	lsrs	r3, r3, #20
 8000944:	3b01      	subs	r3, #1
 8000946:	041a      	lsls	r2, r3, #16
 8000948:	4b52      	ldr	r3, [pc, #328]	; (8000a94 <SystemCoreClockSetup+0x1e8>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	4951      	ldr	r1, [pc, #324]	; (8000a94 <SystemCoreClockSetup+0x1e8>)
 800094e:	4313      	orrs	r3, r2
 8000950:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 8000952:	4b4f      	ldr	r3, [pc, #316]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	4a4e      	ldr	r2, [pc, #312]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 8000958:	f023 0301 	bic.w	r3, r3, #1
 800095c:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800095e:	4b4c      	ldr	r3, [pc, #304]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	4a4b      	ldr	r2, [pc, #300]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 8000964:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000968:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 800096a:	bf00      	nop
 800096c:	4b48      	ldr	r3, [pc, #288]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000974:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000978:	d1f8      	bne.n	800096c <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 800097a:	4b45      	ldr	r3, [pc, #276]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	4a44      	ldr	r2, [pc, #272]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8000986:	4b42      	ldr	r3, [pc, #264]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	4a41      	ldr	r2, [pc, #260]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 800098c:	f043 0310 	orr.w	r3, r3, #16
 8000990:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000992:	4b3f      	ldr	r3, [pc, #252]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 8000994:	4a41      	ldr	r2, [pc, #260]	; (8000a9c <SystemCoreClockSetup+0x1f0>)
 8000996:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000998:	4b3d      	ldr	r3, [pc, #244]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	4a3c      	ldr	r2, [pc, #240]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 800099e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a2:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 80009a4:	4b3a      	ldr	r3, [pc, #232]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	4a39      	ldr	r2, [pc, #228]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 80009aa:	f023 0310 	bic.w	r3, r3, #16
 80009ae:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 80009b0:	4b37      	ldr	r3, [pc, #220]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	4a36      	ldr	r2, [pc, #216]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 80009b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ba:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80009bc:	bf00      	nop
 80009be:	4b34      	ldr	r3, [pc, #208]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d0f9      	beq.n	80009be <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80009ca:	4b31      	ldr	r3, [pc, #196]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	4a30      	ldr	r2, [pc, #192]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 80009d0:	f023 0301 	bic.w	r3, r3, #1
 80009d4:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80009d6:	bf00      	nop
 80009d8:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d1f9      	bne.n	80009d8 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80009e4:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <SystemCoreClockSetup+0x1f4>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	4a2d      	ldr	r2, [pc, #180]	; (8000aa0 <SystemCoreClockSetup+0x1f4>)
 80009ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009ee:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80009f0:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <SystemCoreClockSetup+0x1f4>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <SystemCoreClockSetup+0x1f4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80009fc:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <SystemCoreClockSetup+0x1f4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 8000a02:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <SystemCoreClockSetup+0x1f4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8000a08:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <SystemCoreClockSetup+0x1f4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8000a0e:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <SystemCoreClockSetup+0x1f4>)
 8000a10:	2203      	movs	r2, #3
 8000a12:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 8000a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a1e:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 8000a22:	4a20      	ldr	r2, [pc, #128]	; (8000aa4 <SystemCoreClockSetup+0x1f8>)
 8000a24:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8000a26:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a2a:	f7ff fee0 	bl	80007ee <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000a2e:	bf00      	nop
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d0f9      	beq.n	8000a30 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 8000a3e:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <SystemCoreClockSetup+0x1fc>)
 8000a40:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8000a42:	f241 1094 	movw	r0, #4500	; 0x1194
 8000a46:	f7ff fed2 	bl	80007ee <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000a4a:	bf00      	nop
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d0f9      	beq.n	8000a4c <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 8000a5a:	4a14      	ldr	r2, [pc, #80]	; (8000aac <SystemCoreClockSetup+0x200>)
 8000a5c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8000a5e:	f241 7070 	movw	r0, #6000	; 0x1770
 8000a62:	f7ff fec4 	bl	80007ee <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000a66:	bf00      	nop
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <SystemCoreClockSetup+0x1e4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0f9      	beq.n	8000a68 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <SystemCoreClockSetup+0x204>)
 8000a76:	2205      	movs	r2, #5
 8000a78:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <SystemCoreClockSetup+0x1f4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8000a80:	f000 f818 	bl	8000ab4 <SystemCoreClockUpdate>
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	50004200 	.word	0x50004200
 8000a8c:	50004400 	.word	0x50004400
 8000a90:	50004710 	.word	0x50004710
 8000a94:	50004700 	.word	0x50004700
 8000a98:	6b5fca6b 	.word	0x6b5fca6b
 8000a9c:	01134f00 	.word	0x01134f00
 8000aa0:	50004600 	.word	0x50004600
 8000aa4:	01074f00 	.word	0x01074f00
 8000aa8:	01044f00 	.word	0x01044f00
 8000aac:	01034f00 	.word	0x01034f00
 8000ab0:	50004160 	.word	0x50004160

08000ab4 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000aba:	4b2f      	ldr	r3, [pc, #188]	; (8000b78 <SystemCoreClockUpdate+0xc4>)
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d03e      	beq.n	8000b44 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8000ac6:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <SystemCoreClockUpdate+0xc8>)
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d002      	beq.n	8000ad8 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <SystemCoreClockUpdate+0xcc>)
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	e002      	b.n	8000ade <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000ad8:	f000 f856 	bl	8000b88 <OSCHP_GetFrequency>
 8000adc:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000ade:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <SystemCoreClockUpdate+0xc8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d020      	beq.n	8000b2c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000aea:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <SystemCoreClockUpdate+0xc8>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	0e1b      	lsrs	r3, r3, #24
 8000af0:	f003 030f 	and.w	r3, r3, #15
 8000af4:	3301      	adds	r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <SystemCoreClockUpdate+0xc8>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b02:	3301      	adds	r3, #1
 8000b04:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000b06:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <SystemCoreClockUpdate+0xc8>)
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	0c1b      	lsrs	r3, r3, #16
 8000b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b10:	3301      	adds	r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	fb02 f303 	mul.w	r3, r2, r3
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	fb02 f303 	mul.w	r3, r2, r3
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	e00d      	b.n	8000b48 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <SystemCoreClockUpdate+0xc8>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b34:	3301      	adds	r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	e001      	b.n	8000b48 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <SystemCoreClockUpdate+0xcc>)
 8000b46:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <SystemCoreClockUpdate+0xc4>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	3301      	adds	r3, #1
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <SystemCoreClockUpdate+0xc4>)
 8000b5a:	691b      	ldr	r3, [r3, #16]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	3301      	adds	r3, #1
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b68:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000b6a:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <SystemCoreClockUpdate+0xd0>)
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	6013      	str	r3, [r2, #0]
}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	50004600 	.word	0x50004600
 8000b7c:	50004710 	.word	0x50004710
 8000b80:	016e3600 	.word	0x016e3600
 8000b84:	2000ffc0 	.word	0x2000ffc0

08000b88 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8000b8c:	4b02      	ldr	r3, [pc, #8]	; (8000b98 <OSCHP_GetFrequency+0x10>)
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	00b71b00 	.word	0x00b71b00

08000b9c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <_sbrk+0x5c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <_sbrk+0x5c>)
 8000bae:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <_sbrk+0x60>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <_sbrk+0x5c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3303      	adds	r3, #3
 8000bbc:	f023 0303 	bic.w	r3, r3, #3
 8000bc0:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <_sbrk+0x5c>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <_sbrk+0x64>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <_sbrk+0x5c>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <_sbrk+0x5c>)
 8000bda:	6013      	str	r3, [r2, #0]
    return (base);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	e006      	b.n	8000bee <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8000be0:	f000 f818 	bl	8000c14 <__errno>
 8000be4:	4602      	mov	r2, r0
 8000be6:	230c      	movs	r3, #12
 8000be8:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000644 	.word	0x20000644
 8000bfc:	20000650 	.word	0x20000650
 8000c00:	2000ffc0 	.word	0x2000ffc0

08000c04 <_init>:

/* Init */
void _init(void)
{}
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <__errno>:
 8000c14:	4b01      	ldr	r3, [pc, #4]	; (8000c1c <__errno+0x8>)
 8000c16:	6818      	ldr	r0, [r3, #0]
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	200000a4 	.word	0x200000a4

08000c20 <__libc_init_array>:
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	4e0d      	ldr	r6, [pc, #52]	; (8000c58 <__libc_init_array+0x38>)
 8000c24:	4d0d      	ldr	r5, [pc, #52]	; (8000c5c <__libc_init_array+0x3c>)
 8000c26:	1b76      	subs	r6, r6, r5
 8000c28:	10b6      	asrs	r6, r6, #2
 8000c2a:	d006      	beq.n	8000c3a <__libc_init_array+0x1a>
 8000c2c:	2400      	movs	r4, #0
 8000c2e:	3401      	adds	r4, #1
 8000c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c34:	4798      	blx	r3
 8000c36:	42a6      	cmp	r6, r4
 8000c38:	d1f9      	bne.n	8000c2e <__libc_init_array+0xe>
 8000c3a:	4e09      	ldr	r6, [pc, #36]	; (8000c60 <__libc_init_array+0x40>)
 8000c3c:	4d09      	ldr	r5, [pc, #36]	; (8000c64 <__libc_init_array+0x44>)
 8000c3e:	1b76      	subs	r6, r6, r5
 8000c40:	f7ff ffe0 	bl	8000c04 <_init>
 8000c44:	10b6      	asrs	r6, r6, #2
 8000c46:	d006      	beq.n	8000c56 <__libc_init_array+0x36>
 8000c48:	2400      	movs	r4, #0
 8000c4a:	3401      	adds	r4, #1
 8000c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c50:	4798      	blx	r3
 8000c52:	42a6      	cmp	r6, r4
 8000c54:	d1f9      	bne.n	8000c4a <__libc_init_array+0x2a>
 8000c56:	bd70      	pop	{r4, r5, r6, pc}
 8000c58:	2000063c 	.word	0x2000063c
 8000c5c:	2000063c 	.word	0x2000063c
 8000c60:	2000063c 	.word	0x2000063c
 8000c64:	2000063c 	.word	0x2000063c

08000c68 <_setlocale_r>:
 8000c68:	b1b2      	cbz	r2, 8000c98 <_setlocale_r+0x30>
 8000c6a:	b510      	push	{r4, lr}
 8000c6c:	490b      	ldr	r1, [pc, #44]	; (8000c9c <_setlocale_r+0x34>)
 8000c6e:	4610      	mov	r0, r2
 8000c70:	4614      	mov	r4, r2
 8000c72:	f000 f879 	bl	8000d68 <strcmp>
 8000c76:	b908      	cbnz	r0, 8000c7c <_setlocale_r+0x14>
 8000c78:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <_setlocale_r+0x38>)
 8000c7a:	bd10      	pop	{r4, pc}
 8000c7c:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <_setlocale_r+0x38>)
 8000c7e:	4620      	mov	r0, r4
 8000c80:	f000 f872 	bl	8000d68 <strcmp>
 8000c84:	2800      	cmp	r0, #0
 8000c86:	d0f7      	beq.n	8000c78 <_setlocale_r+0x10>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4906      	ldr	r1, [pc, #24]	; (8000ca4 <_setlocale_r+0x3c>)
 8000c8c:	f000 f86c 	bl	8000d68 <strcmp>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d0f1      	beq.n	8000c78 <_setlocale_r+0x10>
 8000c94:	2000      	movs	r0, #0
 8000c96:	bd10      	pop	{r4, pc}
 8000c98:	4801      	ldr	r0, [pc, #4]	; (8000ca0 <_setlocale_r+0x38>)
 8000c9a:	4770      	bx	lr
 8000c9c:	08001254 	.word	0x08001254
 8000ca0:	08001250 	.word	0x08001250
 8000ca4:	0800125c 	.word	0x0800125c

08000ca8 <__locale_mb_cur_max>:
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <__locale_mb_cur_max+0x14>)
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <__locale_mb_cur_max+0x18>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4613      	moveq	r3, r2
 8000cb6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8000cba:	4770      	bx	lr
 8000cbc:	200000a4 	.word	0x200000a4
 8000cc0:	200004d0 	.word	0x200004d0

08000cc4 <__locale_ctype_ptr_l>:
 8000cc4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <__locale_ctype_ptr>:
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <__locale_ctype_ptr+0x14>)
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <__locale_ctype_ptr+0x18>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4613      	moveq	r3, r2
 8000cda:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8000cde:	4770      	bx	lr
 8000ce0:	200000a4 	.word	0x200000a4
 8000ce4:	200004d0 	.word	0x200004d0

08000ce8 <setlocale>:
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <setlocale+0xc>)
 8000cea:	460a      	mov	r2, r1
 8000cec:	4601      	mov	r1, r0
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	f7ff bfba 	b.w	8000c68 <_setlocale_r>
 8000cf4:	200000a4 	.word	0x200000a4

08000cf8 <_mbtowc_r>:
 8000cf8:	b430      	push	{r4, r5}
 8000cfa:	4c06      	ldr	r4, [pc, #24]	; (8000d14 <_mbtowc_r+0x1c>)
 8000cfc:	4d06      	ldr	r5, [pc, #24]	; (8000d18 <_mbtowc_r+0x20>)
 8000cfe:	6824      	ldr	r4, [r4, #0]
 8000d00:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8000d02:	2c00      	cmp	r4, #0
 8000d04:	bf08      	it	eq
 8000d06:	462c      	moveq	r4, r5
 8000d08:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8000d0c:	46a4      	mov	ip, r4
 8000d0e:	bc30      	pop	{r4, r5}
 8000d10:	4760      	bx	ip
 8000d12:	bf00      	nop
 8000d14:	200000a4 	.word	0x200000a4
 8000d18:	200004d0 	.word	0x200004d0

08000d1c <__ascii_mbtowc>:
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	b149      	cbz	r1, 8000d34 <__ascii_mbtowc+0x18>
 8000d20:	b15a      	cbz	r2, 8000d3a <__ascii_mbtowc+0x1e>
 8000d22:	b16b      	cbz	r3, 8000d40 <__ascii_mbtowc+0x24>
 8000d24:	7813      	ldrb	r3, [r2, #0]
 8000d26:	600b      	str	r3, [r1, #0]
 8000d28:	7812      	ldrb	r2, [r2, #0]
 8000d2a:	1c10      	adds	r0, r2, #0
 8000d2c:	bf18      	it	ne
 8000d2e:	2001      	movne	r0, #1
 8000d30:	b002      	add	sp, #8
 8000d32:	4770      	bx	lr
 8000d34:	a901      	add	r1, sp, #4
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d1f3      	bne.n	8000d22 <__ascii_mbtowc+0x6>
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	b002      	add	sp, #8
 8000d3e:	4770      	bx	lr
 8000d40:	f06f 0001 	mvn.w	r0, #1
 8000d44:	e7f4      	b.n	8000d30 <__ascii_mbtowc+0x14>
 8000d46:	bf00      	nop
	...
 8000d60:	eba2 0003 	sub.w	r0, r2, r3
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop

08000d68 <strcmp>:
 8000d68:	7802      	ldrb	r2, [r0, #0]
 8000d6a:	780b      	ldrb	r3, [r1, #0]
 8000d6c:	2a01      	cmp	r2, #1
 8000d6e:	bf28      	it	cs
 8000d70:	429a      	cmpcs	r2, r3
 8000d72:	d1f5      	bne.n	8000d60 <__ascii_mbtowc+0x44>
 8000d74:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000d78:	ea40 0401 	orr.w	r4, r0, r1
 8000d7c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000d80:	f06f 0c00 	mvn.w	ip, #0
 8000d84:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000d88:	b312      	cbz	r2, 8000dd0 <strcmp+0x68>
 8000d8a:	ea80 0401 	eor.w	r4, r0, r1
 8000d8e:	f014 0f07 	tst.w	r4, #7
 8000d92:	d16a      	bne.n	8000e6a <strcmp+0x102>
 8000d94:	f000 0407 	and.w	r4, r0, #7
 8000d98:	f020 0007 	bic.w	r0, r0, #7
 8000d9c:	f004 0503 	and.w	r5, r4, #3
 8000da0:	f021 0107 	bic.w	r1, r1, #7
 8000da4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000da8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000dac:	f014 0f04 	tst.w	r4, #4
 8000db0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000db4:	fa0c f405 	lsl.w	r4, ip, r5
 8000db8:	ea62 0204 	orn	r2, r2, r4
 8000dbc:	ea66 0604 	orn	r6, r6, r4
 8000dc0:	d00a      	beq.n	8000dd8 <strcmp+0x70>
 8000dc2:	ea63 0304 	orn	r3, r3, r4
 8000dc6:	4662      	mov	r2, ip
 8000dc8:	ea67 0704 	orn	r7, r7, r4
 8000dcc:	4666      	mov	r6, ip
 8000dce:	e003      	b.n	8000dd8 <strcmp+0x70>
 8000dd0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000dd4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000dd8:	fa82 f54c 	uadd8	r5, r2, ip
 8000ddc:	ea82 0406 	eor.w	r4, r2, r6
 8000de0:	faa4 f48c 	sel	r4, r4, ip
 8000de4:	bb6c      	cbnz	r4, 8000e42 <strcmp+0xda>
 8000de6:	fa83 f54c 	uadd8	r5, r3, ip
 8000dea:	ea83 0507 	eor.w	r5, r3, r7
 8000dee:	faa5 f58c 	sel	r5, r5, ip
 8000df2:	b995      	cbnz	r5, 8000e1a <strcmp+0xb2>
 8000df4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8000df8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 8000dfc:	fa82 f54c 	uadd8	r5, r2, ip
 8000e00:	ea82 0406 	eor.w	r4, r2, r6
 8000e04:	faa4 f48c 	sel	r4, r4, ip
 8000e08:	fa83 f54c 	uadd8	r5, r3, ip
 8000e0c:	ea83 0507 	eor.w	r5, r3, r7
 8000e10:	faa5 f58c 	sel	r5, r5, ip
 8000e14:	4325      	orrs	r5, r4
 8000e16:	d0db      	beq.n	8000dd0 <strcmp+0x68>
 8000e18:	b99c      	cbnz	r4, 8000e42 <strcmp+0xda>
 8000e1a:	ba2d      	rev	r5, r5
 8000e1c:	fab5 f485 	clz	r4, r5
 8000e20:	f024 0407 	bic.w	r4, r4, #7
 8000e24:	fa27 f104 	lsr.w	r1, r7, r4
 8000e28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000e2c:	fa23 f304 	lsr.w	r3, r3, r4
 8000e30:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000e34:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000e38:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000e3c:	eba0 0001 	sub.w	r0, r0, r1
 8000e40:	4770      	bx	lr
 8000e42:	ba24      	rev	r4, r4
 8000e44:	fab4 f484 	clz	r4, r4
 8000e48:	f024 0407 	bic.w	r4, r4, #7
 8000e4c:	fa26 f104 	lsr.w	r1, r6, r4
 8000e50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000e54:	fa22 f204 	lsr.w	r2, r2, r4
 8000e58:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8000e5c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000e60:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000e64:	eba0 0001 	sub.w	r0, r0, r1
 8000e68:	4770      	bx	lr
 8000e6a:	f014 0f03 	tst.w	r4, #3
 8000e6e:	d13c      	bne.n	8000eea <strcmp+0x182>
 8000e70:	f010 0403 	ands.w	r4, r0, #3
 8000e74:	d128      	bne.n	8000ec8 <strcmp+0x160>
 8000e76:	f850 2b08 	ldr.w	r2, [r0], #8
 8000e7a:	f851 3b08 	ldr.w	r3, [r1], #8
 8000e7e:	fa82 f54c 	uadd8	r5, r2, ip
 8000e82:	ea82 0503 	eor.w	r5, r2, r3
 8000e86:	faa5 f58c 	sel	r5, r5, ip
 8000e8a:	b95d      	cbnz	r5, 8000ea4 <strcmp+0x13c>
 8000e8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e94:	fa82 f54c 	uadd8	r5, r2, ip
 8000e98:	ea82 0503 	eor.w	r5, r2, r3
 8000e9c:	faa5 f58c 	sel	r5, r5, ip
 8000ea0:	2d00      	cmp	r5, #0
 8000ea2:	d0e8      	beq.n	8000e76 <strcmp+0x10e>
 8000ea4:	ba2d      	rev	r5, r5
 8000ea6:	fab5 f485 	clz	r4, r5
 8000eaa:	f024 0407 	bic.w	r4, r4, #7
 8000eae:	fa23 f104 	lsr.w	r1, r3, r4
 8000eb2:	fa22 f204 	lsr.w	r2, r2, r4
 8000eb6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8000eba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000ebe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000ec2:	eba0 0001 	sub.w	r0, r0, r1
 8000ec6:	4770      	bx	lr
 8000ec8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8000ecc:	f020 0003 	bic.w	r0, r0, #3
 8000ed0:	f850 2b08 	ldr.w	r2, [r0], #8
 8000ed4:	f021 0103 	bic.w	r1, r1, #3
 8000ed8:	f851 3b08 	ldr.w	r3, [r1], #8
 8000edc:	fa0c f404 	lsl.w	r4, ip, r4
 8000ee0:	ea62 0204 	orn	r2, r2, r4
 8000ee4:	ea63 0304 	orn	r3, r3, r4
 8000ee8:	e7c9      	b.n	8000e7e <strcmp+0x116>
 8000eea:	f010 0403 	ands.w	r4, r0, #3
 8000eee:	d01a      	beq.n	8000f26 <strcmp+0x1be>
 8000ef0:	eba1 0104 	sub.w	r1, r1, r4
 8000ef4:	f020 0003 	bic.w	r0, r0, #3
 8000ef8:	07e4      	lsls	r4, r4, #31
 8000efa:	f850 2b04 	ldr.w	r2, [r0], #4
 8000efe:	d006      	beq.n	8000f0e <strcmp+0x1a6>
 8000f00:	d20f      	bcs.n	8000f22 <strcmp+0x1ba>
 8000f02:	788b      	ldrb	r3, [r1, #2]
 8000f04:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8000f08:	1ae4      	subs	r4, r4, r3
 8000f0a:	d106      	bne.n	8000f1a <strcmp+0x1b2>
 8000f0c:	b12b      	cbz	r3, 8000f1a <strcmp+0x1b2>
 8000f0e:	78cb      	ldrb	r3, [r1, #3]
 8000f10:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8000f14:	1ae4      	subs	r4, r4, r3
 8000f16:	d100      	bne.n	8000f1a <strcmp+0x1b2>
 8000f18:	b91b      	cbnz	r3, 8000f22 <strcmp+0x1ba>
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000f20:	4770      	bx	lr
 8000f22:	f101 0104 	add.w	r1, r1, #4
 8000f26:	f850 2b04 	ldr.w	r2, [r0], #4
 8000f2a:	07cc      	lsls	r4, r1, #31
 8000f2c:	f021 0103 	bic.w	r1, r1, #3
 8000f30:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f34:	d848      	bhi.n	8000fc8 <strcmp+0x260>
 8000f36:	d224      	bcs.n	8000f82 <strcmp+0x21a>
 8000f38:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8000f3c:	fa82 f54c 	uadd8	r5, r2, ip
 8000f40:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000f44:	faa5 f58c 	sel	r5, r5, ip
 8000f48:	d10a      	bne.n	8000f60 <strcmp+0x1f8>
 8000f4a:	b965      	cbnz	r5, 8000f66 <strcmp+0x1fe>
 8000f4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f50:	ea84 0402 	eor.w	r4, r4, r2
 8000f54:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000f58:	d10e      	bne.n	8000f78 <strcmp+0x210>
 8000f5a:	f850 2b04 	ldr.w	r2, [r0], #4
 8000f5e:	e7eb      	b.n	8000f38 <strcmp+0x1d0>
 8000f60:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000f64:	e055      	b.n	8001012 <strcmp+0x2aa>
 8000f66:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8000f6a:	d14d      	bne.n	8001008 <strcmp+0x2a0>
 8000f6c:	7808      	ldrb	r0, [r1, #0]
 8000f6e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000f72:	f1c0 0000 	rsb	r0, r0, #0
 8000f76:	4770      	bx	lr
 8000f78:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000f7c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000f80:	e047      	b.n	8001012 <strcmp+0x2aa>
 8000f82:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000f86:	fa82 f54c 	uadd8	r5, r2, ip
 8000f8a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 8000f8e:	faa5 f58c 	sel	r5, r5, ip
 8000f92:	d10a      	bne.n	8000faa <strcmp+0x242>
 8000f94:	b965      	cbnz	r5, 8000fb0 <strcmp+0x248>
 8000f96:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f9a:	ea84 0402 	eor.w	r4, r4, r2
 8000f9e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000fa2:	d10c      	bne.n	8000fbe <strcmp+0x256>
 8000fa4:	f850 2b04 	ldr.w	r2, [r0], #4
 8000fa8:	e7eb      	b.n	8000f82 <strcmp+0x21a>
 8000faa:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000fae:	e030      	b.n	8001012 <strcmp+0x2aa>
 8000fb0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000fb4:	d128      	bne.n	8001008 <strcmp+0x2a0>
 8000fb6:	880b      	ldrh	r3, [r1, #0]
 8000fb8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000fbc:	e029      	b.n	8001012 <strcmp+0x2aa>
 8000fbe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000fc2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8000fc6:	e024      	b.n	8001012 <strcmp+0x2aa>
 8000fc8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8000fcc:	fa82 f54c 	uadd8	r5, r2, ip
 8000fd0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8000fd4:	faa5 f58c 	sel	r5, r5, ip
 8000fd8:	d10a      	bne.n	8000ff0 <strcmp+0x288>
 8000fda:	b965      	cbnz	r5, 8000ff6 <strcmp+0x28e>
 8000fdc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000fe0:	ea84 0402 	eor.w	r4, r4, r2
 8000fe4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8000fe8:	d109      	bne.n	8000ffe <strcmp+0x296>
 8000fea:	f850 2b04 	ldr.w	r2, [r0], #4
 8000fee:	e7eb      	b.n	8000fc8 <strcmp+0x260>
 8000ff0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8000ff4:	e00d      	b.n	8001012 <strcmp+0x2aa>
 8000ff6:	f015 0fff 	tst.w	r5, #255	; 0xff
 8000ffa:	d105      	bne.n	8001008 <strcmp+0x2a0>
 8000ffc:	680b      	ldr	r3, [r1, #0]
 8000ffe:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8001002:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001006:	e004      	b.n	8001012 <strcmp+0x2aa>
 8001008:	f04f 0000 	mov.w	r0, #0
 800100c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001010:	4770      	bx	lr
 8001012:	ba12      	rev	r2, r2
 8001014:	ba1b      	rev	r3, r3
 8001016:	fa82 f44c 	uadd8	r4, r2, ip
 800101a:	ea82 0403 	eor.w	r4, r2, r3
 800101e:	faa4 f58c 	sel	r5, r4, ip
 8001022:	fab5 f485 	clz	r4, r5
 8001026:	fa02 f204 	lsl.w	r2, r2, r4
 800102a:	fa03 f304 	lsl.w	r3, r3, r4
 800102e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8001032:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001036:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800103a:	4770      	bx	lr
 800103c:	0000      	movs	r0, r0
	...

08001040 <strlen>:
 8001040:	f890 f000 	pld	[r0]
 8001044:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8001048:	f020 0107 	bic.w	r1, r0, #7
 800104c:	f06f 0c00 	mvn.w	ip, #0
 8001050:	f010 0407 	ands.w	r4, r0, #7
 8001054:	f891 f020 	pld	[r1, #32]
 8001058:	f040 8049 	bne.w	80010ee <strlen+0xae>
 800105c:	f04f 0400 	mov.w	r4, #0
 8001060:	f06f 0007 	mvn.w	r0, #7
 8001064:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001068:	f891 f040 	pld	[r1, #64]	; 0x40
 800106c:	f100 0008 	add.w	r0, r0, #8
 8001070:	fa82 f24c 	uadd8	r2, r2, ip
 8001074:	faa4 f28c 	sel	r2, r4, ip
 8001078:	fa83 f34c 	uadd8	r3, r3, ip
 800107c:	faa2 f38c 	sel	r3, r2, ip
 8001080:	bb4b      	cbnz	r3, 80010d6 <strlen+0x96>
 8001082:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8001086:	fa82 f24c 	uadd8	r2, r2, ip
 800108a:	f100 0008 	add.w	r0, r0, #8
 800108e:	faa4 f28c 	sel	r2, r4, ip
 8001092:	fa83 f34c 	uadd8	r3, r3, ip
 8001096:	faa2 f38c 	sel	r3, r2, ip
 800109a:	b9e3      	cbnz	r3, 80010d6 <strlen+0x96>
 800109c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80010a0:	fa82 f24c 	uadd8	r2, r2, ip
 80010a4:	f100 0008 	add.w	r0, r0, #8
 80010a8:	faa4 f28c 	sel	r2, r4, ip
 80010ac:	fa83 f34c 	uadd8	r3, r3, ip
 80010b0:	faa2 f38c 	sel	r3, r2, ip
 80010b4:	b97b      	cbnz	r3, 80010d6 <strlen+0x96>
 80010b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80010ba:	f101 0120 	add.w	r1, r1, #32
 80010be:	fa82 f24c 	uadd8	r2, r2, ip
 80010c2:	f100 0008 	add.w	r0, r0, #8
 80010c6:	faa4 f28c 	sel	r2, r4, ip
 80010ca:	fa83 f34c 	uadd8	r3, r3, ip
 80010ce:	faa2 f38c 	sel	r3, r2, ip
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0c6      	beq.n	8001064 <strlen+0x24>
 80010d6:	2a00      	cmp	r2, #0
 80010d8:	bf04      	itt	eq
 80010da:	3004      	addeq	r0, #4
 80010dc:	461a      	moveq	r2, r3
 80010de:	ba12      	rev	r2, r2
 80010e0:	fab2 f282 	clz	r2, r2
 80010e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80010e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80010ec:	4770      	bx	lr
 80010ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80010f2:	f004 0503 	and.w	r5, r4, #3
 80010f6:	f1c4 0000 	rsb	r0, r4, #0
 80010fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80010fe:	f014 0f04 	tst.w	r4, #4
 8001102:	f891 f040 	pld	[r1, #64]	; 0x40
 8001106:	fa0c f505 	lsl.w	r5, ip, r5
 800110a:	ea62 0205 	orn	r2, r2, r5
 800110e:	bf1c      	itt	ne
 8001110:	ea63 0305 	ornne	r3, r3, r5
 8001114:	4662      	movne	r2, ip
 8001116:	f04f 0400 	mov.w	r4, #0
 800111a:	e7a9      	b.n	8001070 <strlen+0x30>

0800111c <_wctomb_r>:
 800111c:	b430      	push	{r4, r5}
 800111e:	4c06      	ldr	r4, [pc, #24]	; (8001138 <_wctomb_r+0x1c>)
 8001120:	4d06      	ldr	r5, [pc, #24]	; (800113c <_wctomb_r+0x20>)
 8001122:	6824      	ldr	r4, [r4, #0]
 8001124:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8001126:	2c00      	cmp	r4, #0
 8001128:	bf08      	it	eq
 800112a:	462c      	moveq	r4, r5
 800112c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8001130:	46a4      	mov	ip, r4
 8001132:	bc30      	pop	{r4, r5}
 8001134:	4760      	bx	ip
 8001136:	bf00      	nop
 8001138:	200000a4 	.word	0x200000a4
 800113c:	200004d0 	.word	0x200004d0

08001140 <__ascii_wctomb>:
 8001140:	b121      	cbz	r1, 800114c <__ascii_wctomb+0xc>
 8001142:	2aff      	cmp	r2, #255	; 0xff
 8001144:	d804      	bhi.n	8001150 <__ascii_wctomb+0x10>
 8001146:	700a      	strb	r2, [r1, #0]
 8001148:	2001      	movs	r0, #1
 800114a:	4770      	bx	lr
 800114c:	4608      	mov	r0, r1
 800114e:	4770      	bx	lr
 8001150:	238a      	movs	r3, #138	; 0x8a
 8001152:	6003      	str	r3, [r0, #0]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	00002d2e 	.word	0x00002d2e
 8001160:	2e2e2e2d 	.word	0x2e2e2e2d
 8001164:	00000000 	.word	0x00000000
 8001168:	2e2d2e2d 	.word	0x2e2d2e2d
 800116c:	00000000 	.word	0x00000000
 8001170:	002e2e2d 	.word	0x002e2e2d
 8001174:	0000002e 	.word	0x0000002e
 8001178:	2e2d2e2e 	.word	0x2e2d2e2e
 800117c:	00000000 	.word	0x00000000
 8001180:	002e2d2d 	.word	0x002e2d2d
 8001184:	2e2e2e2e 	.word	0x2e2e2e2e
 8001188:	00000000 	.word	0x00000000
 800118c:	00002e2e 	.word	0x00002e2e
 8001190:	2d2d2d2e 	.word	0x2d2d2d2e
 8001194:	00000000 	.word	0x00000000
 8001198:	002d2e2d 	.word	0x002d2e2d
 800119c:	2e2e2d2e 	.word	0x2e2e2d2e
 80011a0:	00000000 	.word	0x00000000
 80011a4:	00002d2d 	.word	0x00002d2d
 80011a8:	00002e2d 	.word	0x00002e2d
 80011ac:	002d2d2d 	.word	0x002d2d2d
 80011b0:	2e2d2d2e 	.word	0x2e2d2d2e
 80011b4:	00000000 	.word	0x00000000
 80011b8:	2d2e2d2d 	.word	0x2d2e2d2d
 80011bc:	00000000 	.word	0x00000000
 80011c0:	002e2d2e 	.word	0x002e2d2e
 80011c4:	002e2e2e 	.word	0x002e2e2e
 80011c8:	0000002d 	.word	0x0000002d
 80011cc:	002d2e2e 	.word	0x002d2e2e
 80011d0:	2d2e2e2e 	.word	0x2d2e2e2e
 80011d4:	00000000 	.word	0x00000000
 80011d8:	002d2d2e 	.word	0x002d2d2e
 80011dc:	2d2e2e2d 	.word	0x2d2e2e2d
 80011e0:	00000000 	.word	0x00000000
 80011e4:	2d2d2e2d 	.word	0x2d2d2e2d
 80011e8:	00000000 	.word	0x00000000
 80011ec:	2e2e2d2d 	.word	0x2e2e2d2d
 80011f0:	00000000 	.word	0x00000000
 80011f4:	2d2d2d2d 	.word	0x2d2d2d2d
 80011f8:	0000002d 	.word	0x0000002d
 80011fc:	2d2d2d2e 	.word	0x2d2d2d2e
 8001200:	0000002d 	.word	0x0000002d
 8001204:	2d2d2e2e 	.word	0x2d2d2e2e
 8001208:	0000002d 	.word	0x0000002d
 800120c:	2d2e2e2e 	.word	0x2d2e2e2e
 8001210:	0000002d 	.word	0x0000002d
 8001214:	2e2e2e2e 	.word	0x2e2e2e2e
 8001218:	0000002d 	.word	0x0000002d
 800121c:	2e2e2e2e 	.word	0x2e2e2e2e
 8001220:	0000002e 	.word	0x0000002e
 8001224:	2e2e2e2d 	.word	0x2e2e2e2d
 8001228:	0000002e 	.word	0x0000002e
 800122c:	2e2e2d2d 	.word	0x2e2e2d2d
 8001230:	0000002e 	.word	0x0000002e
 8001234:	2e2d2d2d 	.word	0x2e2d2d2d
 8001238:	0000002e 	.word	0x0000002e
 800123c:	2d2d2d2d 	.word	0x2d2d2d2d
 8001240:	0000002e 	.word	0x0000002e
 8001244:	0000002f 	.word	0x0000002f
 8001248:	00000020 	.word	0x00000020

0800124c <_global_impure_ptr>:
 800124c:	200000a8 00000043 49534f50 00000058     ... C...POSIX...
 800125c:	00000000 0000002e                       ........

08001264 <_ctype_>:
 8001264:	20202000 20202020 28282020 20282828     .         ((((( 
 8001274:	20202020 20202020 20202020 20202020                     
 8001284:	10108820 10101010 10101010 10101010      ...............
 8001294:	04040410 04040404 10040404 10101010     ................
 80012a4:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80012b4:	01010101 01010101 01010101 10101010     ................
 80012c4:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80012d4:	02020202 02020202 02020202 10101010     ................
 80012e4:	00000020 00000000 00000000 00000000      ...............
	...
