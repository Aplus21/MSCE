
build/main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001368  08000000  0c000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00030000  2**0
                  ALLOC
  2 .ram_code     00000000  10000800  10000800  0002063c  2**0
                  CONTENTS
  3 PSRAM_DATA    00000000  10000800  10000800  0002063c  2**0
                  CONTENTS
  4 PSRAM_BSS     00000000  10000800  10000800  0002063c  2**0
                  CONTENTS
  5 .data         0000063c  20000000  0c001368  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  2000063c  0c0019a4  0002063c  2**2
                  ALLOC
  7 .no_init      00000014  2000ffc0  2000ffc0  0002ffc0  2**2
                  ALLOC
  8 DSRAM2_DATA   00000000  30000000  30000000  0002063c  2**0
                  CONTENTS
  9 DSRAM2_BSS    00000000  30000000  30000000  0002063c  2**0
                  CONTENTS
 10 .debug_aranges 00000150  00000000  00000000  00020640  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00004bb6  00000000  00000000  00020790  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000b97  00000000  00000000  00025346  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001322  00000000  00000000  00025edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000548  00000000  00000000  00027200  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000767ef  00000000  00000000  00027748  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000006b8  00000000  00000000  0009df37  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000000e0  00000000  00000000  0009e5ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .build_attributes 000002b2  00000000  00000000  0009e6cf  2**0
                  CONTENTS, READONLY
 19 .debug_macro  00018b26  00000000  00000000  0009e981  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	95 03 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c001368 	.word	0x0c001368
 800024c:	20000000 	.word	0x20000000
 8000250:	0000063c 	.word	0x0000063c
 8000254:	0c0019a4 	.word	0x0c0019a4
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c001368 	.word	0x0c001368
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c001368 	.word	0x0c001368
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	2000063c 	.word	0x2000063c
 800027c:	00000018 	.word	0x00000018
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    ldr sp,=__initial_sp
 8000290:	10000800 	.word	0x10000800
    ldr  r0, =SystemInit
 8000294:	08000811 	.word	0x08000811
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
    ldr  r0, =__libc_init_array
 80002a8:	08000c19 	.word	0x08000c19
    ldr  r0, =main
 80002ac:	08000521 	.word	0x08000521

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	6039      	str	r1, [r7, #0]
 80002be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	db0a      	blt.n	80002de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	490c      	ldr	r1, [pc, #48]	; (8000300 <__NVIC_SetPriority+0x4c>)
 80002ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d2:	0092      	lsls	r2, r2, #2
 80002d4:	b2d2      	uxtb	r2, r2
 80002d6:	440b      	add	r3, r1
 80002d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002dc:	e00a      	b.n	80002f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	b2da      	uxtb	r2, r3
 80002e2:	4908      	ldr	r1, [pc, #32]	; (8000304 <__NVIC_SetPriority+0x50>)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	f003 030f 	and.w	r3, r3, #15
 80002ea:	3b04      	subs	r3, #4
 80002ec:	0092      	lsls	r2, r2, #2
 80002ee:	b2d2      	uxtb	r2, r2
 80002f0:	440b      	add	r3, r1
 80002f2:	761a      	strb	r2, [r3, #24]
}
 80002f4:	bf00      	nop
 80002f6:	370c      	adds	r7, #12
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr
 8000300:	e000e100 	.word	0xe000e100
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3b01      	subs	r3, #1
 8000314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000318:	d301      	bcc.n	800031e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800031a:	2301      	movs	r3, #1
 800031c:	e00f      	b.n	800033e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <SysTick_Config+0x40>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3b01      	subs	r3, #1
 8000324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000326:	213f      	movs	r1, #63	; 0x3f
 8000328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800032c:	f7ff ffc2 	bl	80002b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SysTick_Config+0x40>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000336:	4b04      	ldr	r3, [pc, #16]	; (8000348 <SysTick_Config+0x40>)
 8000338:	2207      	movs	r2, #7
 800033a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010

0800034c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	2201      	movs	r2, #1
 800035c:	409a      	lsls	r2, r3
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	605a      	str	r2, [r3, #4]
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	460b      	mov	r3, r1
 8000378:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800037a:	78fb      	ldrb	r3, [r7, #3]
 800037c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000380:	409a      	lsls	r2, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	605a      	str	r2, [r3, #4]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
	...

08000394 <SysTick_Handler>:
    "...--", "....-", ".....", "-....", "--...", "---..", "----.", "/", " "
};

// SysTick_Handler function will be called every 1 ms
void SysTick_Handler()
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
    if (msTicks != 0)
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <SysTick_Handler+0x20>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d004      	beq.n	80003aa <SysTick_Handler+0x16>
    {
        msTicks--;
 80003a0:	4b04      	ldr	r3, [pc, #16]	; (80003b4 <SysTick_Handler+0x20>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	3b01      	subs	r3, #1
 80003a6:	4a03      	ldr	r2, [pc, #12]	; (80003b4 <SysTick_Handler+0x20>)
 80003a8:	6013      	str	r3, [r2, #0]
    }
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	20000644 	.word	0x20000644

080003b8 <DelayInit>:

void DelayInit()
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
    // Update SystemCoreClock value
    SystemCoreClockUpdate();
 80003bc:	f000 fb76 	bl	8000aac <SystemCoreClockUpdate>
    // Configure the SysTick timer to overflow every 1 s
    SysTick_Config(SystemCoreClock / TICKS_PER_SECOND);
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <DelayInit+0x20>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a05      	ldr	r2, [pc, #20]	; (80003dc <DelayInit+0x24>)
 80003c6:	fba2 2303 	umull	r2, r3, r2, r3
 80003ca:	099b      	lsrs	r3, r3, #6
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ff9b 	bl	8000308 <SysTick_Config>
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	2000ffc0 	.word	0x2000ffc0
 80003dc:	10624dd3 	.word	0x10624dd3

080003e0 <DelayMs>:

void DelayMs(uint32_t ms)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
    // Reload ms value
    msTicks = ms;
 80003e8:	4a06      	ldr	r2, [pc, #24]	; (8000404 <DelayMs+0x24>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	6013      	str	r3, [r2, #0]
    // Wait until msTick reach zero
    while (msTicks){
 80003ee:	bf00      	nop
 80003f0:	4b04      	ldr	r3, [pc, #16]	; (8000404 <DelayMs+0x24>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d1fb      	bne.n	80003f0 <DelayMs+0x10>

    }
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	20000644 	.word	0x20000644

08000408 <dot>:

void dot(){
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
    XMC_GPIO_SetOutputHigh(LED1);
 800040c:	2101      	movs	r1, #1
 800040e:	4806      	ldr	r0, [pc, #24]	; (8000428 <dot+0x20>)
 8000410:	f7ff ff9c 	bl	800034c <XMC_GPIO_SetOutputHigh>
    DelayMs(DOT_TIME);
 8000414:	2064      	movs	r0, #100	; 0x64
 8000416:	f7ff ffe3 	bl	80003e0 <DelayMs>
    XMC_GPIO_SetOutputLow(LED1);
 800041a:	2101      	movs	r1, #1
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <dot+0x20>)
 800041e:	f7ff ffa6 	bl	800036e <XMC_GPIO_SetOutputLow>
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	48028100 	.word	0x48028100

0800042c <dash>:

void dash(){
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
    XMC_GPIO_SetOutputHigh(LED1);
 8000430:	2101      	movs	r1, #1
 8000432:	4806      	ldr	r0, [pc, #24]	; (800044c <dash+0x20>)
 8000434:	f7ff ff8a 	bl	800034c <XMC_GPIO_SetOutputHigh>
    DelayMs(DASH_TIME);
 8000438:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800043c:	f7ff ffd0 	bl	80003e0 <DelayMs>
    XMC_GPIO_SetOutputLow(LED1);
 8000440:	2101      	movs	r1, #1
 8000442:	4802      	ldr	r0, [pc, #8]	; (800044c <dash+0x20>)
 8000444:	f7ff ff93 	bl	800036e <XMC_GPIO_SetOutputLow>
}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}
 800044c:	48028100 	.word	0x48028100

08000450 <textToMorse>:

void textToMorse(const char *text) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b086      	sub	sp, #24
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < strlen(text); i++) {
 8000458:	2300      	movs	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
 800045c:	e04f      	b.n	80004fe <textToMorse+0xae>
        char c = tolower(text[i]);
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	4413      	add	r3, r2
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	73fb      	strb	r3, [r7, #15]
 8000468:	f000 fc2c 	bl	8000cc4 <__locale_ctype_ptr>
 800046c:	4602      	mov	r2, r0
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	3301      	adds	r3, #1
 8000472:	4413      	add	r3, r2
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	f003 0303 	and.w	r3, r3, #3
 800047a:	2b01      	cmp	r3, #1
 800047c:	d102      	bne.n	8000484 <textToMorse+0x34>
 800047e:	7bfb      	ldrb	r3, [r7, #15]
 8000480:	3320      	adds	r3, #32
 8000482:	e000      	b.n	8000486 <textToMorse+0x36>
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	73bb      	strb	r3, [r7, #14]
        if (c >= 'a' && c <= 'z') {
 8000488:	7bbb      	ldrb	r3, [r7, #14]
 800048a:	2b60      	cmp	r3, #96	; 0x60
 800048c:	d929      	bls.n	80004e2 <textToMorse+0x92>
 800048e:	7bbb      	ldrb	r3, [r7, #14]
 8000490:	2b7a      	cmp	r3, #122	; 0x7a
 8000492:	d826      	bhi.n	80004e2 <textToMorse+0x92>
            const char *morse = morseCode[c - 'a'];
 8000494:	7bbb      	ldrb	r3, [r7, #14]
 8000496:	3b61      	subs	r3, #97	; 0x61
 8000498:	4a20      	ldr	r2, [pc, #128]	; (800051c <textToMorse+0xcc>)
 800049a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800049e:	60bb      	str	r3, [r7, #8]
            for (int j = 0; morse[j] != '\0'; j++) {
 80004a0:	2300      	movs	r3, #0
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	e016      	b.n	80004d4 <textToMorse+0x84>
                if (morse[j] == '.') {
 80004a6:	693b      	ldr	r3, [r7, #16]
 80004a8:	68ba      	ldr	r2, [r7, #8]
 80004aa:	4413      	add	r3, r2
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b2e      	cmp	r3, #46	; 0x2e
 80004b0:	d102      	bne.n	80004b8 <textToMorse+0x68>
                    // Dot: 100ms
                    dot();
 80004b2:	f7ff ffa9 	bl	8000408 <dot>
 80004b6:	e007      	b.n	80004c8 <textToMorse+0x78>
                } else if (morse[j] == '-') {
 80004b8:	693b      	ldr	r3, [r7, #16]
 80004ba:	68ba      	ldr	r2, [r7, #8]
 80004bc:	4413      	add	r3, r2
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b2d      	cmp	r3, #45	; 0x2d
 80004c2:	d101      	bne.n	80004c8 <textToMorse+0x78>
                    // Dash: 300ms
                    dash();
 80004c4:	f7ff ffb2 	bl	800042c <dash>
                }
                // Space between Morse characters (1 dot)
                DelayMs(DOT_TIME);
 80004c8:	2064      	movs	r0, #100	; 0x64
 80004ca:	f7ff ff89 	bl	80003e0 <DelayMs>
            for (int j = 0; morse[j] != '\0'; j++) {
 80004ce:	693b      	ldr	r3, [r7, #16]
 80004d0:	3301      	adds	r3, #1
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	693b      	ldr	r3, [r7, #16]
 80004d6:	68ba      	ldr	r2, [r7, #8]
 80004d8:	4413      	add	r3, r2
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d1e2      	bne.n	80004a6 <textToMorse+0x56>
        if (c >= 'a' && c <= 'z') {
 80004e0:	e006      	b.n	80004f0 <textToMorse+0xa0>
            }
        } else if (c == ' ') {
 80004e2:	7bbb      	ldrb	r3, [r7, #14]
 80004e4:	2b20      	cmp	r3, #32
 80004e6:	d103      	bne.n	80004f0 <textToMorse+0xa0>
            // Space between words (7 dots)
            DelayMs(SPACE_TIME);
 80004e8:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80004ec:	f7ff ff78 	bl	80003e0 <DelayMs>
        }
        // Space between Morse letters (3 dots)
        DelayMs(LETTER_TIME);
 80004f0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004f4:	f7ff ff74 	bl	80003e0 <DelayMs>
    for (int i = 0; i < strlen(text); i++) {
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	3301      	adds	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f000 fd9e 	bl	8001040 <strlen>
 8000504:	4602      	mov	r2, r0
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	429a      	cmp	r2, r3
 800050a:	d8a8      	bhi.n	800045e <textToMorse+0xe>
    }
    // Space between Transmission
    DelayMs(REPEAT_TIME);
 800050c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000510:	f7ff ff66 	bl	80003e0 <DelayMs>
}
 8000514:	bf00      	nop
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	2000000c 	.word	0x2000000c

08000520 <main>:

int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
    XMC_GPIO_CONFIG_t config;

    config.mode = XMC_GPIO_MODE_OUTPUT_PUSH_PULL;
 8000526:	2380      	movs	r3, #128	; 0x80
 8000528:	713b      	strb	r3, [r7, #4]
    config.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW;
 800052a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800052e:	60bb      	str	r3, [r7, #8]
    config.output_strength = XMC_GPIO_OUTPUT_STRENGTH_MEDIUM;
 8000530:	2304      	movs	r3, #4
 8000532:	733b      	strb	r3, [r7, #12]

    XMC_GPIO_Init(LED1, &config);
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	461a      	mov	r2, r3
 8000538:	2101      	movs	r1, #1
 800053a:	4804      	ldr	r0, [pc, #16]	; (800054c <main+0x2c>)
 800053c:	f000 f86e 	bl	800061c <XMC_GPIO_Init>

    DelayInit();
 8000540:	f7ff ff3a 	bl	80003b8 <DelayInit>
    while(1)
    {
        textToMorse(secretCode); //.. / -.-. .- -. / -- --- .-. ... .
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <main+0x30>)
 8000546:	f7ff ff83 	bl	8000450 <textToMorse>
 800054a:	e7fb      	b.n	8000544 <main+0x24>
 800054c:	48028100 	.word	0x48028100
 8000550:	20000000 	.word	0x20000000

08000554 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	70fb      	strb	r3, [r7, #3]
 8000560:	4613      	mov	r3, r2
 8000562:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000564:	78fb      	ldrb	r3, [r7, #3]
 8000566:	089b      	lsrs	r3, r3, #2
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3204      	adds	r2, #4
 8000570:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000574:	78fb      	ldrb	r3, [r7, #3]
 8000576:	f003 0303 	and.w	r3, r3, #3
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	21f8      	movs	r1, #248	; 0xf8
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	78f9      	ldrb	r1, [r7, #3]
 8000586:	0889      	lsrs	r1, r1, #2
 8000588:	b2c9      	uxtb	r1, r1
 800058a:	4608      	mov	r0, r1
 800058c:	ea02 0103 	and.w	r1, r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	1d02      	adds	r2, r0, #4
 8000594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000598:	78fb      	ldrb	r3, [r7, #3]
 800059a:	089b      	lsrs	r3, r3, #2
 800059c:	b2db      	uxtb	r3, r3
 800059e:	461a      	mov	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3204      	adds	r2, #4
 80005a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005a8:	78b9      	ldrb	r1, [r7, #2]
 80005aa:	78fb      	ldrb	r3, [r7, #3]
 80005ac:	f003 0303 	and.w	r3, r3, #3
 80005b0:	00db      	lsls	r3, r3, #3
 80005b2:	fa01 f303 	lsl.w	r3, r1, r3
 80005b6:	78f9      	ldrb	r1, [r7, #3]
 80005b8:	0889      	lsrs	r1, r1, #2
 80005ba:	b2c9      	uxtb	r1, r1
 80005bc:	4608      	mov	r0, r1
 80005be:	ea42 0103 	orr.w	r1, r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	1d02      	adds	r2, r0, #4
 80005c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	460b      	mov	r3, r1
 80005e0:	70fb      	strb	r3, [r7, #3]
 80005e2:	4613      	mov	r3, r2
 80005e4:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80005ea:	78fb      	ldrb	r3, [r7, #3]
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	2103      	movs	r1, #3
 80005f0:	fa01 f303 	lsl.w	r3, r1, r3
 80005f4:	43db      	mvns	r3, r3
 80005f6:	401a      	ands	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000600:	78b9      	ldrb	r1, [r7, #2]
 8000602:	78fb      	ldrb	r3, [r7, #3]
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	fa01 f303 	lsl.w	r3, r1, r3
 800060a:	431a      	orrs	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	460b      	mov	r3, r1
 8000626:	607a      	str	r2, [r7, #4]
 8000628:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800062a:	7afb      	ldrb	r3, [r7, #11]
 800062c:	089b      	lsrs	r3, r3, #2
 800062e:	b2db      	uxtb	r3, r3
 8000630:	461a      	mov	r2, r3
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3204      	adds	r2, #4
 8000636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800063a:	7afb      	ldrb	r3, [r7, #11]
 800063c:	f003 0303 	and.w	r3, r3, #3
 8000640:	00db      	lsls	r3, r3, #3
 8000642:	21f8      	movs	r1, #248	; 0xf8
 8000644:	fa01 f303 	lsl.w	r3, r1, r3
 8000648:	43db      	mvns	r3, r3
 800064a:	7af9      	ldrb	r1, [r7, #11]
 800064c:	0889      	lsrs	r1, r1, #2
 800064e:	b2c9      	uxtb	r1, r1
 8000650:	4608      	mov	r0, r1
 8000652:	ea02 0103 	and.w	r1, r2, r3
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	1d02      	adds	r2, r0, #4
 800065a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000662:	7afb      	ldrb	r3, [r7, #11]
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	2103      	movs	r1, #3
 8000668:	fa01 f303 	lsl.w	r3, r1, r3
 800066c:	43db      	mvns	r3, r3
 800066e:	401a      	ands	r2, r3
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4a38      	ldr	r2, [pc, #224]	; (8000758 <XMC_GPIO_Init+0x13c>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d003      	beq.n	8000684 <XMC_GPIO_Init+0x68>
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4a37      	ldr	r2, [pc, #220]	; (800075c <XMC_GPIO_Init+0x140>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d10a      	bne.n	800069a <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000688:	7afb      	ldrb	r3, [r7, #11]
 800068a:	2101      	movs	r1, #1
 800068c:	fa01 f303 	lsl.w	r3, r1, r3
 8000690:	43db      	mvns	r3, r3
 8000692:	401a      	ands	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	661a      	str	r2, [r3, #96]	; 0x60
 8000698:	e03c      	b.n	8000714 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	685a      	ldr	r2, [r3, #4]
 800069e:	7afb      	ldrb	r3, [r7, #11]
 80006a0:	409a      	lsls	r2, r3
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80006a6:	7afb      	ldrb	r3, [r7, #11]
 80006a8:	08db      	lsrs	r3, r3, #3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	3210      	adds	r2, #16
 80006b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	f003 0307 	and.w	r3, r3, #7
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	2107      	movs	r1, #7
 80006c0:	fa01 f303 	lsl.w	r3, r1, r3
 80006c4:	43db      	mvns	r3, r3
 80006c6:	7af9      	ldrb	r1, [r7, #11]
 80006c8:	08c9      	lsrs	r1, r1, #3
 80006ca:	b2c9      	uxtb	r1, r1
 80006cc:	4608      	mov	r0, r1
 80006ce:	ea02 0103 	and.w	r1, r2, r3
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	f100 0210 	add.w	r2, r0, #16
 80006d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80006dc:	7afb      	ldrb	r3, [r7, #11]
 80006de:	08db      	lsrs	r3, r3, #3
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	3210      	adds	r2, #16
 80006e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	7a1b      	ldrb	r3, [r3, #8]
 80006f0:	4619      	mov	r1, r3
 80006f2:	7afb      	ldrb	r3, [r7, #11]
 80006f4:	f003 0307 	and.w	r3, r3, #7
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	7af9      	ldrb	r1, [r7, #11]
 8000700:	08c9      	lsrs	r1, r1, #3
 8000702:	b2c9      	uxtb	r1, r1
 8000704:	4608      	mov	r0, r1
 8000706:	ea42 0103 	orr.w	r1, r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f100 0210 	add.w	r2, r0, #16
 8000710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000714:	7afb      	ldrb	r3, [r7, #11]
 8000716:	089b      	lsrs	r3, r3, #2
 8000718:	b2db      	uxtb	r3, r3
 800071a:	461a      	mov	r2, r3
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3204      	adds	r2, #4
 8000720:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	f003 0303 	and.w	r3, r3, #3
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	7af9      	ldrb	r1, [r7, #11]
 8000738:	0889      	lsrs	r1, r1, #2
 800073a:	b2c9      	uxtb	r1, r1
 800073c:	4608      	mov	r0, r1
 800073e:	ea42 0103 	orr.w	r1, r2, r3
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	1d02      	adds	r2, r0, #4
 8000746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	48028e00 	.word	0x48028e00
 800075c:	48028f00 	.word	0x48028f00

08000760 <XMC_GPIO_SetOutputStrength>:

void XMC_GPIO_SetOutputStrength(XMC_GPIO_PORT_t *const port, const uint8_t pin, XMC_GPIO_OUTPUT_STRENGTH_t strength)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]
 800076c:	4613      	mov	r3, r2
 800076e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid output strength", XMC_GPIO_CHECK_OUTPUT_STRENGTH(strength));

  port->PDR[pin >> 3U] &= (uint32_t)~((uint32_t)PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	08db      	lsrs	r3, r3, #3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3210      	adds	r2, #16
 800077c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000780:	78fb      	ldrb	r3, [r7, #3]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	2107      	movs	r1, #7
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43db      	mvns	r3, r3
 8000790:	78f9      	ldrb	r1, [r7, #3]
 8000792:	08c9      	lsrs	r1, r1, #3
 8000794:	b2c9      	uxtb	r1, r1
 8000796:	4608      	mov	r0, r1
 8000798:	ea02 0103 	and.w	r1, r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f100 0210 	add.w	r2, r0, #16
 80007a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->PDR[pin >> 3U] |= (uint32_t)strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	08db      	lsrs	r3, r3, #3
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	461a      	mov	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	3210      	adds	r2, #16
 80007b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007b6:	78b9      	ldrb	r1, [r7, #2]
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	fa01 f303 	lsl.w	r3, r1, r3
 80007c4:	78f9      	ldrb	r1, [r7, #3]
 80007c6:	08c9      	lsrs	r1, r1, #3
 80007c8:	b2c9      	uxtb	r1, r1
 80007ca:	4608      	mov	r0, r1
 80007cc:	ea42 0103 	orr.w	r1, r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f100 0210 	add.w	r2, r0, #16
 80007d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b085      	sub	sp, #20
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	e003      	b.n	80007fc <delay+0x16>
  {
    __NOP();
 80007f4:	bf00      	nop
  for(i = 0UL; i < cycles ;++i)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	3301      	adds	r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	d8f7      	bhi.n	80007f4 <delay+0xe>
  }
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000810:	b598      	push	{r3, r4, r7, lr}
 8000812:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000814:	4a06      	ldr	r2, [pc, #24]	; (8000830 <SystemInit+0x20>)
 8000816:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800081a:	4614      	mov	r4, r2
 800081c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800081e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 8000822:	f000 f807 	bl	8000834 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8000826:	f000 f83d 	bl	80008a4 <SystemCoreClockSetup>
}
 800082a:	bf00      	nop
 800082c:	bd98      	pop	{r3, r4, r7, pc}
 800082e:	bf00      	nop
 8000830:	2000ffc4 	.word	0x2000ffc4

08000834 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083a:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <SystemCoreSetup+0x64>)
 800083e:	4a17      	ldr	r2, [pc, #92]	; (800089c <SystemCoreSetup+0x68>)
 8000840:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000842:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("cpsie i" : : : "memory");
 8000846:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <SystemCoreSetup+0x64>)
 800084a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <SystemCoreSetup+0x64>)
 8000850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <SystemCoreSetup+0x64>)
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <SystemCoreSetup+0x64>)
 800085e:	f023 0308 	bic.w	r3, r3, #8
 8000862:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <SystemCoreSetup+0x6c>)
 8000866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800086a:	3314      	adds	r3, #20
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f023 030f 	bic.w	r3, r3, #15
 8000876:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f043 0303 	orr.w	r3, r3, #3
 800087e:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <SystemCoreSetup+0x6c>)
 8000882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000886:	3314      	adds	r3, #20
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	601a      	str	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00
 800089c:	08000000 	.word	0x08000000
 80008a0:	58001000 	.word	0x58001000

080008a4 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80008a8:	4b75      	ldr	r3, [pc, #468]	; (8000a80 <SystemCoreClockSetup+0x1dc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d10c      	bne.n	80008ce <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 80008b4:	4b72      	ldr	r3, [pc, #456]	; (8000a80 <SystemCoreClockSetup+0x1dc>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	4a71      	ldr	r2, [pc, #452]	; (8000a80 <SystemCoreClockSetup+0x1dc>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 80008c0:	bf00      	nop
 80008c2:	4b6f      	ldr	r3, [pc, #444]	; (8000a80 <SystemCoreClockSetup+0x1dc>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0f9      	beq.n	80008c2 <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 80008ce:	4b6d      	ldr	r3, [pc, #436]	; (8000a84 <SystemCoreClockSetup+0x1e0>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d009      	beq.n	80008ee <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80008da:	4b6a      	ldr	r3, [pc, #424]	; (8000a84 <SystemCoreClockSetup+0x1e0>)
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	4a69      	ldr	r2, [pc, #420]	; (8000a84 <SystemCoreClockSetup+0x1e0>)
 80008e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e4:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80008e6:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80008ea:	f7ff ff7c 	bl	80007e6 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80008ee:	4b66      	ldr	r3, [pc, #408]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	4a65      	ldr	r2, [pc, #404]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 80008f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008f8:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80008fa:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80008fe:	f7ff ff72 	bl	80007e6 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000902:	4b61      	ldr	r3, [pc, #388]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	4a60      	ldr	r2, [pc, #384]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800090c:	f023 0302 	bic.w	r3, r3, #2
 8000910:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 8000912:	4b5e      	ldr	r3, [pc, #376]	; (8000a8c <SystemCoreClockSetup+0x1e8>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800091a:	2b00      	cmp	r3, #0
 800091c:	d029      	beq.n	8000972 <SystemCoreClockSetup+0xce>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 800091e:	4b5b      	ldr	r3, [pc, #364]	; (8000a8c <SystemCoreClockSetup+0x1e8>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	4a5a      	ldr	r2, [pc, #360]	; (8000a8c <SystemCoreClockSetup+0x1e8>)
 8000924:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000928:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800092c:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 800092e:	f000 f927 	bl	8000b80 <OSCHP_GetFrequency>
 8000932:	4602      	mov	r2, r0
 8000934:	4b56      	ldr	r3, [pc, #344]	; (8000a90 <SystemCoreClockSetup+0x1ec>)
 8000936:	fba3 2302 	umull	r2, r3, r3, r2
 800093a:	0d1b      	lsrs	r3, r3, #20
 800093c:	3b01      	subs	r3, #1
 800093e:	041a      	lsls	r2, r3, #16
 8000940:	4b52      	ldr	r3, [pc, #328]	; (8000a8c <SystemCoreClockSetup+0x1e8>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	4951      	ldr	r1, [pc, #324]	; (8000a8c <SystemCoreClockSetup+0x1e8>)
 8000946:	4313      	orrs	r3, r2
 8000948:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 800094a:	4b4f      	ldr	r3, [pc, #316]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 800094c:	68db      	ldr	r3, [r3, #12]
 800094e:	4a4e      	ldr	r2, [pc, #312]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000950:	f023 0301 	bic.w	r3, r3, #1
 8000954:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000956:	4b4c      	ldr	r3, [pc, #304]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	4a4b      	ldr	r2, [pc, #300]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 800095c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000960:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000962:	bf00      	nop
 8000964:	4b48      	ldr	r3, [pc, #288]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800096c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000970:	d1f8      	bne.n	8000964 <SystemCoreClockSetup+0xc0>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000972:	4b45      	ldr	r3, [pc, #276]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4a44      	ldr	r2, [pc, #272]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 800097e:	4b42      	ldr	r3, [pc, #264]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	4a41      	ldr	r2, [pc, #260]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000984:	f043 0310 	orr.w	r3, r3, #16
 8000988:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800098a:	4b3f      	ldr	r3, [pc, #252]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 800098c:	4a41      	ldr	r2, [pc, #260]	; (8000a94 <SystemCoreClockSetup+0x1f0>)
 800098e:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000990:	4b3d      	ldr	r3, [pc, #244]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	4a3c      	ldr	r2, [pc, #240]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800099a:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 800099c:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	4a39      	ldr	r2, [pc, #228]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 80009a2:	f023 0310 	bic.w	r3, r3, #16
 80009a6:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 80009a8:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	4a36      	ldr	r2, [pc, #216]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 80009ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b2:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80009b4:	bf00      	nop
 80009b6:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d0f9      	beq.n	80009b6 <SystemCoreClockSetup+0x112>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 80009c2:	4b31      	ldr	r3, [pc, #196]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	4a30      	ldr	r2, [pc, #192]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 80009c8:	f023 0301 	bic.w	r3, r3, #1
 80009cc:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80009ce:	bf00      	nop
 80009d0:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1f9      	bne.n	80009d0 <SystemCoreClockSetup+0x12c>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80009dc:	4b2e      	ldr	r3, [pc, #184]	; (8000a98 <SystemCoreClockSetup+0x1f4>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	4a2d      	ldr	r2, [pc, #180]	; (8000a98 <SystemCoreClockSetup+0x1f4>)
 80009e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e6:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80009e8:	4b2b      	ldr	r3, [pc, #172]	; (8000a98 <SystemCoreClockSetup+0x1f4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80009ee:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <SystemCoreClockSetup+0x1f4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80009f4:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <SystemCoreClockSetup+0x1f4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80009fa:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <SystemCoreClockSetup+0x1f4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 8000a00:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <SystemCoreClockSetup+0x1f4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 8000a06:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <SystemCoreClockSetup+0x1f4>)
 8000a08:	2203      	movs	r2, #3
 8000a0a:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a16:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000a1a:	4a20      	ldr	r2, [pc, #128]	; (8000a9c <SystemCoreClockSetup+0x1f8>)
 8000a1c:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 8000a1e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a22:	f7ff fee0 	bl	80007e6 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000a26:	bf00      	nop
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0f9      	beq.n	8000a28 <SystemCoreClockSetup+0x184>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000a36:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <SystemCoreClockSetup+0x1fc>)
 8000a38:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 8000a3a:	f241 1094 	movw	r0, #4500	; 0x1194
 8000a3e:	f7ff fed2 	bl	80007e6 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000a42:	bf00      	nop
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0f9      	beq.n	8000a44 <SystemCoreClockSetup+0x1a0>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000a50:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000a52:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <SystemCoreClockSetup+0x200>)
 8000a54:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 8000a56:	f241 7070 	movw	r0, #6000	; 0x1770
 8000a5a:	f7ff fec4 	bl	80007e6 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000a5e:	bf00      	nop
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <SystemCoreClockSetup+0x1e4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0f9      	beq.n	8000a60 <SystemCoreClockSetup+0x1bc>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <SystemCoreClockSetup+0x204>)
 8000a6e:	2205      	movs	r2, #5
 8000a70:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <SystemCoreClockSetup+0x1f4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 8000a78:	f000 f818 	bl	8000aac <SystemCoreClockUpdate>
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	50004200 	.word	0x50004200
 8000a84:	50004400 	.word	0x50004400
 8000a88:	50004710 	.word	0x50004710
 8000a8c:	50004700 	.word	0x50004700
 8000a90:	6b5fca6b 	.word	0x6b5fca6b
 8000a94:	01134f00 	.word	0x01134f00
 8000a98:	50004600 	.word	0x50004600
 8000a9c:	01074f00 	.word	0x01074f00
 8000aa0:	01044f00 	.word	0x01044f00
 8000aa4:	01034f00 	.word	0x01034f00
 8000aa8:	50004160 	.word	0x50004160

08000aac <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000ab2:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <SystemCoreClockUpdate+0xc4>)
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d03e      	beq.n	8000b3c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8000abe:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <SystemCoreClockUpdate+0xc8>)
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d002      	beq.n	8000ad0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <SystemCoreClockUpdate+0xcc>)
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	e002      	b.n	8000ad6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000ad0:	f000 f856 	bl	8000b80 <OSCHP_GetFrequency>
 8000ad4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000ad6:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <SystemCoreClockUpdate+0xc8>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d020      	beq.n	8000b24 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8000ae2:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <SystemCoreClockUpdate+0xc8>)
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	0e1b      	lsrs	r3, r3, #24
 8000ae8:	f003 030f 	and.w	r3, r3, #15
 8000aec:	3301      	adds	r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <SystemCoreClockUpdate+0xc8>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000afa:	3301      	adds	r3, #1
 8000afc:	603b      	str	r3, [r7, #0]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <SystemCoreClockUpdate+0xc8>)
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	0c1b      	lsrs	r3, r3, #16
 8000b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b08:	3301      	adds	r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	fb02 f303 	mul.w	r3, r2, r3
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	fb02 f303 	mul.w	r3, r2, r3
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	e00d      	b.n	8000b40 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <SystemCoreClockUpdate+0xc8>)
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	60bb      	str	r3, [r7, #8]
      
      temp = (temp / kdiv);
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	e001      	b.n	8000b40 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <SystemCoreClockUpdate+0xcc>)
 8000b3e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <SystemCoreClockUpdate+0xc4>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	3301      	adds	r3, #1
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <SystemCoreClockUpdate+0xc4>)
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	3301      	adds	r3, #1
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b60:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000b62:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <SystemCoreClockUpdate+0xd0>)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	50004600 	.word	0x50004600
 8000b74:	50004710 	.word	0x50004710
 8000b78:	016e3600 	.word	0x016e3600
 8000b7c:	2000ffc0 	.word	0x2000ffc0

08000b80 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8000b84:	4b02      	ldr	r3, [pc, #8]	; (8000b90 <OSCHP_GetFrequency+0x10>)
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	00b71b00 	.word	0x00b71b00

08000b94 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <_sbrk+0x5c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <_sbrk+0x5c>)
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <_sbrk+0x60>)
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <_sbrk+0x5c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3303      	adds	r3, #3
 8000bb4:	f023 0303 	bic.w	r3, r3, #3
 8000bb8:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <_sbrk+0x5c>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <_sbrk+0x64>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d207      	bcs.n	8000bd8 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <_sbrk+0x5c>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <_sbrk+0x5c>)
 8000bd2:	6013      	str	r3, [r2, #0]
    return (base);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	e006      	b.n	8000be6 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8000bd8:	f000 f818 	bl	8000c0c <__errno>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	230c      	movs	r3, #12
 8000be0:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000064c 	.word	0x2000064c
 8000bf4:	20000658 	.word	0x20000658
 8000bf8:	2000ffc0 	.word	0x2000ffc0

08000bfc <_init>:

/* Init */
void _init(void)
{}
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <__errno>:
 8000c0c:	4b01      	ldr	r3, [pc, #4]	; (8000c14 <__errno+0x8>)
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	200000a4 	.word	0x200000a4

08000c18 <__libc_init_array>:
 8000c18:	b570      	push	{r4, r5, r6, lr}
 8000c1a:	4e0d      	ldr	r6, [pc, #52]	; (8000c50 <__libc_init_array+0x38>)
 8000c1c:	4d0d      	ldr	r5, [pc, #52]	; (8000c54 <__libc_init_array+0x3c>)
 8000c1e:	1b76      	subs	r6, r6, r5
 8000c20:	10b6      	asrs	r6, r6, #2
 8000c22:	d006      	beq.n	8000c32 <__libc_init_array+0x1a>
 8000c24:	2400      	movs	r4, #0
 8000c26:	3401      	adds	r4, #1
 8000c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c2c:	4798      	blx	r3
 8000c2e:	42a6      	cmp	r6, r4
 8000c30:	d1f9      	bne.n	8000c26 <__libc_init_array+0xe>
 8000c32:	4e09      	ldr	r6, [pc, #36]	; (8000c58 <__libc_init_array+0x40>)
 8000c34:	4d09      	ldr	r5, [pc, #36]	; (8000c5c <__libc_init_array+0x44>)
 8000c36:	1b76      	subs	r6, r6, r5
 8000c38:	f7ff ffe0 	bl	8000bfc <_init>
 8000c3c:	10b6      	asrs	r6, r6, #2
 8000c3e:	d006      	beq.n	8000c4e <__libc_init_array+0x36>
 8000c40:	2400      	movs	r4, #0
 8000c42:	3401      	adds	r4, #1
 8000c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c48:	4798      	blx	r3
 8000c4a:	42a6      	cmp	r6, r4
 8000c4c:	d1f9      	bne.n	8000c42 <__libc_init_array+0x2a>
 8000c4e:	bd70      	pop	{r4, r5, r6, pc}
 8000c50:	2000063c 	.word	0x2000063c
 8000c54:	2000063c 	.word	0x2000063c
 8000c58:	2000063c 	.word	0x2000063c
 8000c5c:	2000063c 	.word	0x2000063c

08000c60 <_setlocale_r>:
 8000c60:	b1b2      	cbz	r2, 8000c90 <_setlocale_r+0x30>
 8000c62:	b510      	push	{r4, lr}
 8000c64:	490b      	ldr	r1, [pc, #44]	; (8000c94 <_setlocale_r+0x34>)
 8000c66:	4610      	mov	r0, r2
 8000c68:	4614      	mov	r4, r2
 8000c6a:	f000 f86d 	bl	8000d48 <strcmp>
 8000c6e:	b908      	cbnz	r0, 8000c74 <_setlocale_r+0x14>
 8000c70:	4809      	ldr	r0, [pc, #36]	; (8000c98 <_setlocale_r+0x38>)
 8000c72:	bd10      	pop	{r4, pc}
 8000c74:	4908      	ldr	r1, [pc, #32]	; (8000c98 <_setlocale_r+0x38>)
 8000c76:	4620      	mov	r0, r4
 8000c78:	f000 f866 	bl	8000d48 <strcmp>
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	d0f7      	beq.n	8000c70 <_setlocale_r+0x10>
 8000c80:	4620      	mov	r0, r4
 8000c82:	4906      	ldr	r1, [pc, #24]	; (8000c9c <_setlocale_r+0x3c>)
 8000c84:	f000 f860 	bl	8000d48 <strcmp>
 8000c88:	2800      	cmp	r0, #0
 8000c8a:	d0f1      	beq.n	8000c70 <_setlocale_r+0x10>
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	bd10      	pop	{r4, pc}
 8000c90:	4801      	ldr	r0, [pc, #4]	; (8000c98 <_setlocale_r+0x38>)
 8000c92:	4770      	bx	lr
 8000c94:	08001254 	.word	0x08001254
 8000c98:	08001250 	.word	0x08001250
 8000c9c:	0800125c 	.word	0x0800125c

08000ca0 <__locale_mb_cur_max>:
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <__locale_mb_cur_max+0x14>)
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <__locale_mb_cur_max+0x18>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bf08      	it	eq
 8000cac:	4613      	moveq	r3, r2
 8000cae:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8000cb2:	4770      	bx	lr
 8000cb4:	200000a4 	.word	0x200000a4
 8000cb8:	200004d0 	.word	0x200004d0

08000cbc <__locale_ctype_ptr_l>:
 8000cbc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <__locale_ctype_ptr>:
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <__locale_ctype_ptr+0x14>)
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <__locale_ctype_ptr+0x18>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bf08      	it	eq
 8000cd0:	4613      	moveq	r3, r2
 8000cd2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8000cd6:	4770      	bx	lr
 8000cd8:	200000a4 	.word	0x200000a4
 8000cdc:	200004d0 	.word	0x200004d0

08000ce0 <setlocale>:
 8000ce0:	4b02      	ldr	r3, [pc, #8]	; (8000cec <setlocale+0xc>)
 8000ce2:	460a      	mov	r2, r1
 8000ce4:	4601      	mov	r1, r0
 8000ce6:	6818      	ldr	r0, [r3, #0]
 8000ce8:	f7ff bfba 	b.w	8000c60 <_setlocale_r>
 8000cec:	200000a4 	.word	0x200000a4

08000cf0 <_mbtowc_r>:
 8000cf0:	b430      	push	{r4, r5}
 8000cf2:	4c06      	ldr	r4, [pc, #24]	; (8000d0c <_mbtowc_r+0x1c>)
 8000cf4:	4d06      	ldr	r5, [pc, #24]	; (8000d10 <_mbtowc_r+0x20>)
 8000cf6:	6824      	ldr	r4, [r4, #0]
 8000cf8:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8000cfa:	2c00      	cmp	r4, #0
 8000cfc:	bf08      	it	eq
 8000cfe:	462c      	moveq	r4, r5
 8000d00:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8000d04:	46a4      	mov	ip, r4
 8000d06:	bc30      	pop	{r4, r5}
 8000d08:	4760      	bx	ip
 8000d0a:	bf00      	nop
 8000d0c:	200000a4 	.word	0x200000a4
 8000d10:	200004d0 	.word	0x200004d0

08000d14 <__ascii_mbtowc>:
 8000d14:	b082      	sub	sp, #8
 8000d16:	b149      	cbz	r1, 8000d2c <__ascii_mbtowc+0x18>
 8000d18:	b15a      	cbz	r2, 8000d32 <__ascii_mbtowc+0x1e>
 8000d1a:	b16b      	cbz	r3, 8000d38 <__ascii_mbtowc+0x24>
 8000d1c:	7813      	ldrb	r3, [r2, #0]
 8000d1e:	600b      	str	r3, [r1, #0]
 8000d20:	7812      	ldrb	r2, [r2, #0]
 8000d22:	1c10      	adds	r0, r2, #0
 8000d24:	bf18      	it	ne
 8000d26:	2001      	movne	r0, #1
 8000d28:	b002      	add	sp, #8
 8000d2a:	4770      	bx	lr
 8000d2c:	a901      	add	r1, sp, #4
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	d1f3      	bne.n	8000d1a <__ascii_mbtowc+0x6>
 8000d32:	4610      	mov	r0, r2
 8000d34:	b002      	add	sp, #8
 8000d36:	4770      	bx	lr
 8000d38:	f06f 0001 	mvn.w	r0, #1
 8000d3c:	e7f4      	b.n	8000d28 <__ascii_mbtowc+0x14>
 8000d3e:	bf00      	nop
 8000d40:	eba2 0003 	sub.w	r0, r2, r3
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <strcmp>:
 8000d48:	7802      	ldrb	r2, [r0, #0]
 8000d4a:	780b      	ldrb	r3, [r1, #0]
 8000d4c:	2a01      	cmp	r2, #1
 8000d4e:	bf28      	it	cs
 8000d50:	429a      	cmpcs	r2, r3
 8000d52:	d1f5      	bne.n	8000d40 <__ascii_mbtowc+0x2c>
 8000d54:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8000d58:	ea40 0401 	orr.w	r4, r0, r1
 8000d5c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000d60:	f06f 0c00 	mvn.w	ip, #0
 8000d64:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8000d68:	b312      	cbz	r2, 8000db0 <strcmp+0x68>
 8000d6a:	ea80 0401 	eor.w	r4, r0, r1
 8000d6e:	f014 0f07 	tst.w	r4, #7
 8000d72:	d16a      	bne.n	8000e4a <strcmp+0x102>
 8000d74:	f000 0407 	and.w	r4, r0, #7
 8000d78:	f020 0007 	bic.w	r0, r0, #7
 8000d7c:	f004 0503 	and.w	r5, r4, #3
 8000d80:	f021 0107 	bic.w	r1, r1, #7
 8000d84:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000d88:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000d8c:	f014 0f04 	tst.w	r4, #4
 8000d90:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000d94:	fa0c f405 	lsl.w	r4, ip, r5
 8000d98:	ea62 0204 	orn	r2, r2, r4
 8000d9c:	ea66 0604 	orn	r6, r6, r4
 8000da0:	d00a      	beq.n	8000db8 <strcmp+0x70>
 8000da2:	ea63 0304 	orn	r3, r3, r4
 8000da6:	4662      	mov	r2, ip
 8000da8:	ea67 0704 	orn	r7, r7, r4
 8000dac:	4666      	mov	r6, ip
 8000dae:	e003      	b.n	8000db8 <strcmp+0x70>
 8000db0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8000db4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8000db8:	fa82 f54c 	uadd8	r5, r2, ip
 8000dbc:	ea82 0406 	eor.w	r4, r2, r6
 8000dc0:	faa4 f48c 	sel	r4, r4, ip
 8000dc4:	bb6c      	cbnz	r4, 8000e22 <strcmp+0xda>
 8000dc6:	fa83 f54c 	uadd8	r5, r3, ip
 8000dca:	ea83 0507 	eor.w	r5, r3, r7
 8000dce:	faa5 f58c 	sel	r5, r5, ip
 8000dd2:	b995      	cbnz	r5, 8000dfa <strcmp+0xb2>
 8000dd4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8000dd8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 8000ddc:	fa82 f54c 	uadd8	r5, r2, ip
 8000de0:	ea82 0406 	eor.w	r4, r2, r6
 8000de4:	faa4 f48c 	sel	r4, r4, ip
 8000de8:	fa83 f54c 	uadd8	r5, r3, ip
 8000dec:	ea83 0507 	eor.w	r5, r3, r7
 8000df0:	faa5 f58c 	sel	r5, r5, ip
 8000df4:	4325      	orrs	r5, r4
 8000df6:	d0db      	beq.n	8000db0 <strcmp+0x68>
 8000df8:	b99c      	cbnz	r4, 8000e22 <strcmp+0xda>
 8000dfa:	ba2d      	rev	r5, r5
 8000dfc:	fab5 f485 	clz	r4, r5
 8000e00:	f024 0407 	bic.w	r4, r4, #7
 8000e04:	fa27 f104 	lsr.w	r1, r7, r4
 8000e08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000e0c:	fa23 f304 	lsr.w	r3, r3, r4
 8000e10:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8000e14:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000e18:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000e1c:	eba0 0001 	sub.w	r0, r0, r1
 8000e20:	4770      	bx	lr
 8000e22:	ba24      	rev	r4, r4
 8000e24:	fab4 f484 	clz	r4, r4
 8000e28:	f024 0407 	bic.w	r4, r4, #7
 8000e2c:	fa26 f104 	lsr.w	r1, r6, r4
 8000e30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8000e34:	fa22 f204 	lsr.w	r2, r2, r4
 8000e38:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8000e3c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000e40:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000e44:	eba0 0001 	sub.w	r0, r0, r1
 8000e48:	4770      	bx	lr
 8000e4a:	f014 0f03 	tst.w	r4, #3
 8000e4e:	d13c      	bne.n	8000eca <strcmp+0x182>
 8000e50:	f010 0403 	ands.w	r4, r0, #3
 8000e54:	d128      	bne.n	8000ea8 <strcmp+0x160>
 8000e56:	f850 2b08 	ldr.w	r2, [r0], #8
 8000e5a:	f851 3b08 	ldr.w	r3, [r1], #8
 8000e5e:	fa82 f54c 	uadd8	r5, r2, ip
 8000e62:	ea82 0503 	eor.w	r5, r2, r3
 8000e66:	faa5 f58c 	sel	r5, r5, ip
 8000e6a:	b95d      	cbnz	r5, 8000e84 <strcmp+0x13c>
 8000e6c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8000e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e74:	fa82 f54c 	uadd8	r5, r2, ip
 8000e78:	ea82 0503 	eor.w	r5, r2, r3
 8000e7c:	faa5 f58c 	sel	r5, r5, ip
 8000e80:	2d00      	cmp	r5, #0
 8000e82:	d0e8      	beq.n	8000e56 <strcmp+0x10e>
 8000e84:	ba2d      	rev	r5, r5
 8000e86:	fab5 f485 	clz	r4, r5
 8000e8a:	f024 0407 	bic.w	r4, r4, #7
 8000e8e:	fa23 f104 	lsr.w	r1, r3, r4
 8000e92:	fa22 f204 	lsr.w	r2, r2, r4
 8000e96:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8000e9a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000e9e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000ea2:	eba0 0001 	sub.w	r0, r0, r1
 8000ea6:	4770      	bx	lr
 8000ea8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8000eac:	f020 0003 	bic.w	r0, r0, #3
 8000eb0:	f850 2b08 	ldr.w	r2, [r0], #8
 8000eb4:	f021 0103 	bic.w	r1, r1, #3
 8000eb8:	f851 3b08 	ldr.w	r3, [r1], #8
 8000ebc:	fa0c f404 	lsl.w	r4, ip, r4
 8000ec0:	ea62 0204 	orn	r2, r2, r4
 8000ec4:	ea63 0304 	orn	r3, r3, r4
 8000ec8:	e7c9      	b.n	8000e5e <strcmp+0x116>
 8000eca:	f010 0403 	ands.w	r4, r0, #3
 8000ece:	d01a      	beq.n	8000f06 <strcmp+0x1be>
 8000ed0:	eba1 0104 	sub.w	r1, r1, r4
 8000ed4:	f020 0003 	bic.w	r0, r0, #3
 8000ed8:	07e4      	lsls	r4, r4, #31
 8000eda:	f850 2b04 	ldr.w	r2, [r0], #4
 8000ede:	d006      	beq.n	8000eee <strcmp+0x1a6>
 8000ee0:	d20f      	bcs.n	8000f02 <strcmp+0x1ba>
 8000ee2:	788b      	ldrb	r3, [r1, #2]
 8000ee4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8000ee8:	1ae4      	subs	r4, r4, r3
 8000eea:	d106      	bne.n	8000efa <strcmp+0x1b2>
 8000eec:	b12b      	cbz	r3, 8000efa <strcmp+0x1b2>
 8000eee:	78cb      	ldrb	r3, [r1, #3]
 8000ef0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8000ef4:	1ae4      	subs	r4, r4, r3
 8000ef6:	d100      	bne.n	8000efa <strcmp+0x1b2>
 8000ef8:	b91b      	cbnz	r3, 8000f02 <strcmp+0x1ba>
 8000efa:	4620      	mov	r0, r4
 8000efc:	f85d 4b10 	ldr.w	r4, [sp], #16
 8000f00:	4770      	bx	lr
 8000f02:	f101 0104 	add.w	r1, r1, #4
 8000f06:	f850 2b04 	ldr.w	r2, [r0], #4
 8000f0a:	07cc      	lsls	r4, r1, #31
 8000f0c:	f021 0103 	bic.w	r1, r1, #3
 8000f10:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f14:	d848      	bhi.n	8000fa8 <strcmp+0x260>
 8000f16:	d224      	bcs.n	8000f62 <strcmp+0x21a>
 8000f18:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8000f1c:	fa82 f54c 	uadd8	r5, r2, ip
 8000f20:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8000f24:	faa5 f58c 	sel	r5, r5, ip
 8000f28:	d10a      	bne.n	8000f40 <strcmp+0x1f8>
 8000f2a:	b965      	cbnz	r5, 8000f46 <strcmp+0x1fe>
 8000f2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f30:	ea84 0402 	eor.w	r4, r4, r2
 8000f34:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8000f38:	d10e      	bne.n	8000f58 <strcmp+0x210>
 8000f3a:	f850 2b04 	ldr.w	r2, [r0], #4
 8000f3e:	e7eb      	b.n	8000f18 <strcmp+0x1d0>
 8000f40:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000f44:	e055      	b.n	8000ff2 <strcmp+0x2aa>
 8000f46:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8000f4a:	d14d      	bne.n	8000fe8 <strcmp+0x2a0>
 8000f4c:	7808      	ldrb	r0, [r1, #0]
 8000f4e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000f52:	f1c0 0000 	rsb	r0, r0, #0
 8000f56:	4770      	bx	lr
 8000f58:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000f5c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8000f60:	e047      	b.n	8000ff2 <strcmp+0x2aa>
 8000f62:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8000f66:	fa82 f54c 	uadd8	r5, r2, ip
 8000f6a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 8000f6e:	faa5 f58c 	sel	r5, r5, ip
 8000f72:	d10a      	bne.n	8000f8a <strcmp+0x242>
 8000f74:	b965      	cbnz	r5, 8000f90 <strcmp+0x248>
 8000f76:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f7a:	ea84 0402 	eor.w	r4, r4, r2
 8000f7e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8000f82:	d10c      	bne.n	8000f9e <strcmp+0x256>
 8000f84:	f850 2b04 	ldr.w	r2, [r0], #4
 8000f88:	e7eb      	b.n	8000f62 <strcmp+0x21a>
 8000f8a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000f8e:	e030      	b.n	8000ff2 <strcmp+0x2aa>
 8000f90:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8000f94:	d128      	bne.n	8000fe8 <strcmp+0x2a0>
 8000f96:	880b      	ldrh	r3, [r1, #0]
 8000f98:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000f9c:	e029      	b.n	8000ff2 <strcmp+0x2aa>
 8000f9e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8000fa2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8000fa6:	e024      	b.n	8000ff2 <strcmp+0x2aa>
 8000fa8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8000fac:	fa82 f54c 	uadd8	r5, r2, ip
 8000fb0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8000fb4:	faa5 f58c 	sel	r5, r5, ip
 8000fb8:	d10a      	bne.n	8000fd0 <strcmp+0x288>
 8000fba:	b965      	cbnz	r5, 8000fd6 <strcmp+0x28e>
 8000fbc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000fc0:	ea84 0402 	eor.w	r4, r4, r2
 8000fc4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8000fc8:	d109      	bne.n	8000fde <strcmp+0x296>
 8000fca:	f850 2b04 	ldr.w	r2, [r0], #4
 8000fce:	e7eb      	b.n	8000fa8 <strcmp+0x260>
 8000fd0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8000fd4:	e00d      	b.n	8000ff2 <strcmp+0x2aa>
 8000fd6:	f015 0fff 	tst.w	r5, #255	; 0xff
 8000fda:	d105      	bne.n	8000fe8 <strcmp+0x2a0>
 8000fdc:	680b      	ldr	r3, [r1, #0]
 8000fde:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8000fe2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000fe6:	e004      	b.n	8000ff2 <strcmp+0x2aa>
 8000fe8:	f04f 0000 	mov.w	r0, #0
 8000fec:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8000ff0:	4770      	bx	lr
 8000ff2:	ba12      	rev	r2, r2
 8000ff4:	ba1b      	rev	r3, r3
 8000ff6:	fa82 f44c 	uadd8	r4, r2, ip
 8000ffa:	ea82 0403 	eor.w	r4, r2, r3
 8000ffe:	faa4 f58c 	sel	r5, r4, ip
 8001002:	fab5 f485 	clz	r4, r5
 8001006:	fa02 f204 	lsl.w	r2, r2, r4
 800100a:	fa03 f304 	lsl.w	r3, r3, r4
 800100e:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8001012:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8001016:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 800101a:	4770      	bx	lr
	...

08001040 <strlen>:
 8001040:	f890 f000 	pld	[r0]
 8001044:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8001048:	f020 0107 	bic.w	r1, r0, #7
 800104c:	f06f 0c00 	mvn.w	ip, #0
 8001050:	f010 0407 	ands.w	r4, r0, #7
 8001054:	f891 f020 	pld	[r1, #32]
 8001058:	f040 8049 	bne.w	80010ee <strlen+0xae>
 800105c:	f04f 0400 	mov.w	r4, #0
 8001060:	f06f 0007 	mvn.w	r0, #7
 8001064:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001068:	f891 f040 	pld	[r1, #64]	; 0x40
 800106c:	f100 0008 	add.w	r0, r0, #8
 8001070:	fa82 f24c 	uadd8	r2, r2, ip
 8001074:	faa4 f28c 	sel	r2, r4, ip
 8001078:	fa83 f34c 	uadd8	r3, r3, ip
 800107c:	faa2 f38c 	sel	r3, r2, ip
 8001080:	bb4b      	cbnz	r3, 80010d6 <strlen+0x96>
 8001082:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8001086:	fa82 f24c 	uadd8	r2, r2, ip
 800108a:	f100 0008 	add.w	r0, r0, #8
 800108e:	faa4 f28c 	sel	r2, r4, ip
 8001092:	fa83 f34c 	uadd8	r3, r3, ip
 8001096:	faa2 f38c 	sel	r3, r2, ip
 800109a:	b9e3      	cbnz	r3, 80010d6 <strlen+0x96>
 800109c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80010a0:	fa82 f24c 	uadd8	r2, r2, ip
 80010a4:	f100 0008 	add.w	r0, r0, #8
 80010a8:	faa4 f28c 	sel	r2, r4, ip
 80010ac:	fa83 f34c 	uadd8	r3, r3, ip
 80010b0:	faa2 f38c 	sel	r3, r2, ip
 80010b4:	b97b      	cbnz	r3, 80010d6 <strlen+0x96>
 80010b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80010ba:	f101 0120 	add.w	r1, r1, #32
 80010be:	fa82 f24c 	uadd8	r2, r2, ip
 80010c2:	f100 0008 	add.w	r0, r0, #8
 80010c6:	faa4 f28c 	sel	r2, r4, ip
 80010ca:	fa83 f34c 	uadd8	r3, r3, ip
 80010ce:	faa2 f38c 	sel	r3, r2, ip
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0c6      	beq.n	8001064 <strlen+0x24>
 80010d6:	2a00      	cmp	r2, #0
 80010d8:	bf04      	itt	eq
 80010da:	3004      	addeq	r0, #4
 80010dc:	461a      	moveq	r2, r3
 80010de:	ba12      	rev	r2, r2
 80010e0:	fab2 f282 	clz	r2, r2
 80010e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80010e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80010ec:	4770      	bx	lr
 80010ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80010f2:	f004 0503 	and.w	r5, r4, #3
 80010f6:	f1c4 0000 	rsb	r0, r4, #0
 80010fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80010fe:	f014 0f04 	tst.w	r4, #4
 8001102:	f891 f040 	pld	[r1, #64]	; 0x40
 8001106:	fa0c f505 	lsl.w	r5, ip, r5
 800110a:	ea62 0205 	orn	r2, r2, r5
 800110e:	bf1c      	itt	ne
 8001110:	ea63 0305 	ornne	r3, r3, r5
 8001114:	4662      	movne	r2, ip
 8001116:	f04f 0400 	mov.w	r4, #0
 800111a:	e7a9      	b.n	8001070 <strlen+0x30>

0800111c <_wctomb_r>:
 800111c:	b430      	push	{r4, r5}
 800111e:	4c06      	ldr	r4, [pc, #24]	; (8001138 <_wctomb_r+0x1c>)
 8001120:	4d06      	ldr	r5, [pc, #24]	; (800113c <_wctomb_r+0x20>)
 8001122:	6824      	ldr	r4, [r4, #0]
 8001124:	6b64      	ldr	r4, [r4, #52]	; 0x34
 8001126:	2c00      	cmp	r4, #0
 8001128:	bf08      	it	eq
 800112a:	462c      	moveq	r4, r5
 800112c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8001130:	46a4      	mov	ip, r4
 8001132:	bc30      	pop	{r4, r5}
 8001134:	4760      	bx	ip
 8001136:	bf00      	nop
 8001138:	200000a4 	.word	0x200000a4
 800113c:	200004d0 	.word	0x200004d0

08001140 <__ascii_wctomb>:
 8001140:	b121      	cbz	r1, 800114c <__ascii_wctomb+0xc>
 8001142:	2aff      	cmp	r2, #255	; 0xff
 8001144:	d804      	bhi.n	8001150 <__ascii_wctomb+0x10>
 8001146:	700a      	strb	r2, [r1, #0]
 8001148:	2001      	movs	r0, #1
 800114a:	4770      	bx	lr
 800114c:	4608      	mov	r0, r1
 800114e:	4770      	bx	lr
 8001150:	238a      	movs	r3, #138	; 0x8a
 8001152:	6003      	str	r3, [r0, #0]
 8001154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	00002d2e 	.word	0x00002d2e
 8001160:	2e2e2e2d 	.word	0x2e2e2e2d
 8001164:	00000000 	.word	0x00000000
 8001168:	2e2d2e2d 	.word	0x2e2d2e2d
 800116c:	00000000 	.word	0x00000000
 8001170:	002e2e2d 	.word	0x002e2e2d
 8001174:	0000002e 	.word	0x0000002e
 8001178:	2e2d2e2e 	.word	0x2e2d2e2e
 800117c:	00000000 	.word	0x00000000
 8001180:	002e2d2d 	.word	0x002e2d2d
 8001184:	2e2e2e2e 	.word	0x2e2e2e2e
 8001188:	00000000 	.word	0x00000000
 800118c:	00002e2e 	.word	0x00002e2e
 8001190:	2d2d2d2e 	.word	0x2d2d2d2e
 8001194:	00000000 	.word	0x00000000
 8001198:	002d2e2d 	.word	0x002d2e2d
 800119c:	2e2e2d2e 	.word	0x2e2e2d2e
 80011a0:	00000000 	.word	0x00000000
 80011a4:	00002d2d 	.word	0x00002d2d
 80011a8:	00002e2d 	.word	0x00002e2d
 80011ac:	002d2d2d 	.word	0x002d2d2d
 80011b0:	2e2d2d2e 	.word	0x2e2d2d2e
 80011b4:	00000000 	.word	0x00000000
 80011b8:	2d2e2d2d 	.word	0x2d2e2d2d
 80011bc:	00000000 	.word	0x00000000
 80011c0:	002e2d2e 	.word	0x002e2d2e
 80011c4:	002e2e2e 	.word	0x002e2e2e
 80011c8:	0000002d 	.word	0x0000002d
 80011cc:	002d2e2e 	.word	0x002d2e2e
 80011d0:	2d2e2e2e 	.word	0x2d2e2e2e
 80011d4:	00000000 	.word	0x00000000
 80011d8:	002d2d2e 	.word	0x002d2d2e
 80011dc:	2d2e2e2d 	.word	0x2d2e2e2d
 80011e0:	00000000 	.word	0x00000000
 80011e4:	2d2d2e2d 	.word	0x2d2d2e2d
 80011e8:	00000000 	.word	0x00000000
 80011ec:	2e2e2d2d 	.word	0x2e2e2d2d
 80011f0:	00000000 	.word	0x00000000
 80011f4:	2d2d2d2d 	.word	0x2d2d2d2d
 80011f8:	0000002d 	.word	0x0000002d
 80011fc:	2d2d2d2e 	.word	0x2d2d2d2e
 8001200:	0000002d 	.word	0x0000002d
 8001204:	2d2d2e2e 	.word	0x2d2d2e2e
 8001208:	0000002d 	.word	0x0000002d
 800120c:	2d2e2e2e 	.word	0x2d2e2e2e
 8001210:	0000002d 	.word	0x0000002d
 8001214:	2e2e2e2e 	.word	0x2e2e2e2e
 8001218:	0000002d 	.word	0x0000002d
 800121c:	2e2e2e2e 	.word	0x2e2e2e2e
 8001220:	0000002e 	.word	0x0000002e
 8001224:	2e2e2e2d 	.word	0x2e2e2e2d
 8001228:	0000002e 	.word	0x0000002e
 800122c:	2e2e2d2d 	.word	0x2e2e2d2d
 8001230:	0000002e 	.word	0x0000002e
 8001234:	2e2d2d2d 	.word	0x2e2d2d2d
 8001238:	0000002e 	.word	0x0000002e
 800123c:	2d2d2d2d 	.word	0x2d2d2d2d
 8001240:	0000002e 	.word	0x0000002e
 8001244:	0000002f 	.word	0x0000002f
 8001248:	00000020 	.word	0x00000020

0800124c <_global_impure_ptr>:
 800124c:	200000a8 00000043 49534f50 00000058     ... C...POSIX...
 800125c:	00000000 0000002e                       ........

08001264 <_ctype_>:
 8001264:	20202000 20202020 28282020 20282828     .         ((((( 
 8001274:	20202020 20202020 20202020 20202020                     
 8001284:	10108820 10101010 10101010 10101010      ...............
 8001294:	04040410 04040404 10040404 10101010     ................
 80012a4:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80012b4:	01010101 01010101 01010101 10101010     ................
 80012c4:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80012d4:	02020202 02020202 02020202 10101010     ................
 80012e4:	00000020 00000000 00000000 00000000      ...............
	...
